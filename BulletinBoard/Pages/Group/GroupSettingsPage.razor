@page "/group/settings"

@using BulletinBoard.Services
@using BulletinBoard.Data
@using BulletinBoard.Model
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components;
@using static BulletinBoard.Extensions.ExtensionsMethod


@inject IUserService UserService
@inject IGroupService GroupService
@inject IBulletinService BulletinService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager



@if (_pageState == State.ACCESS_BLOCKED)
{
    <AccessBlockedComponent></AccessBlockedComponent>
}
else if (_group != null)
{
    <MudCard Outlined="true" Class="mb-3">

        <MudCardMedia Image="/control_panel.svg" Height="200" Style="background-position:top" />
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4"><strong>@_group.Name</strong> - Group panel</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Class="pt-0">
            <MudText Typo="Typo.body2">Manage group users and settings</MudText>
        </MudCardContent>
    </MudCard>

    <MudExpansionPanels MultiExpansion="true">
        @*User panel*@
        <MudExpansionPanel IsInitiallyExpanded=false HideIcon="true">
            <TitleContent>
                <div class="d-flex">
                    <MudText Typo="Typo.h5">Users</MudText>
                    @if (_groupUsers.Any())
                    {
                        <MudBadge Content=@_groupUsers.Count Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                            <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Default" />
                        </MudBadge>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.People" Class="d-flex ml-auto" Color="Color.Default" />
                    }
                </div>
            </TitleContent>
            <ChildContent>

                <MudTable Items="@_groupUsers" Hover=true Striped=true Filter="new Func<GroupUser,bool>(FilterFunc1)" Elevation="0">
                    <ToolBarContent>
                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Username</MudTh>
                        <MudTh>Joined</MudTh>
                        <MudTh>Role</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Username">@context.User!.UserName</MudTd>
                        <MudTd DataLabel="Joined">@context.Joined</MudTd>
                        <MudTd DataLabel="Role">
                            <MudSelect Class="mt-0" T="GroupRole" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@context.Role" SelectedValuesChanged="@(()=>RoleChanged(@context))">
                                <MudSelectItem Value="@(GroupRole.User)" />
                                <MudSelectItem Value="@(GroupRole.Moderator)" />
                                <MudSelectItem Value="@(GroupRole.Admin)" />
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Action"><MudButton Color="Color.Error" OnClick="@(async() => await RemoveUser(@context))">Delete</MudButton></MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </ChildContent>
        </MudExpansionPanel>

        @*Pending approval panel*@
        <MudExpansionPanel IsInitiallyExpanded=false HideIcon="true" Disabled="!_pendingApproval.Any()">
            <TitleContent>
                <div class="d-flex">
                    <MudText Typo="Typo.h5">Pending approval</MudText>
                    @if (_pendingApproval.Any())
                    {
                        <MudBadge Content=@_pendingApproval.Count Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                            <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Default" />
                        </MudBadge>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Email" Class="d-flex ml-auto" Color="Color.Default" />
                    }
                </div>
            </TitleContent>
            <ChildContent>
                <MudTable Items="@_pendingApproval" Hover=true Striped=true Filter="new Func<GroupUser,bool>(FilterFunc1)" Elevation="0">
                    <ToolBarContent>
                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Username</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Username">@context.User!.UserName</MudTd>
                        <MudTd DataLabel="Action">
                            <MudButton Color="Color.Success" OnClick="@(async() => await AcceptUser(@context))">Accept</MudButton>
                            <MudButton Color="Color.Error" OnClick="@(async() => await RejectUser(@context))">Reject</MudButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </ChildContent>
        </MudExpansionPanel>

        @*Invited users panel*@
        <MudExpansionPanel IsInitiallyExpanded=false HideIcon="true" Disabled="!_invited.Any()">
            <TitleContent>
                <div class="d-flex">
                    <MudText Typo="Typo.h5">Invited</MudText>
                    @if (_invited.Any())
                    {
                        <MudBadge Content=@_invited.Count Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                            <MudIcon Icon="@Icons.Material.Filled.InsertInvitation" Color="Color.Default" />
                        </MudBadge>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.InsertInvitation" Class="d-flex ml-auto" Color="Color.Default" />
                    }
                </div>
            </TitleContent>
            <ChildContent>
                <MudTable Items="@_invited" Hover=true Striped=true Filter="new Func<GroupUser,bool>(FilterFunc1)" Elevation="0">
                    <ToolBarContent>
                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Username</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Username">@context.User!.UserName</MudTd>
                        <MudTd DataLabel="Action">
                            <MudButton Color="Color.Error" OnClick="@(async() => await CancelInviteUser(@context))">Cancel</MudButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </ChildContent>
        </MudExpansionPanel>

        @*Search users panel*@
        <MudExpansionPanel IsInitiallyExpanded=false HideIcon="true">
            <TitleContent>
                <div class="d-flex">
                    <MudText Typo="Typo.h5">Add new users</MudText>
                    <MudIcon Icon="@Icons.Material.Filled.Search" Class="d-flex ml-auto" Color="Color.Default" />
                </div>
            </TitleContent>
            <ChildContent>
                <MudAutocomplete AutoFocus="true" @ref="_searchAutocomplete" T="User" Placeholder="Search" SearchFunc="Search" ValueChanged="OnSearchResult" Class="docs-search-bar mx-4" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search">
                    <ItemTemplate Context="result">
                        <MudText>@result.UserName</MudText>
                    </ItemTemplate>
                </MudAutocomplete>
                <MudCard Elevation="0" Class="mx-3 mt-6 d-flex">
                    @if (_searchResultUser != null)
                    {
                        <MudAvatar Image=@Avatar(_searchResultUser.Image)></MudAvatar>
                        <MudText Class="pl-3 mr-auto">@_searchResultUser.UserName</MudText>
                        @if (_searchResultGroupUser == null)
                        {
                            <MudButton Disabled="@_searchProcessing" Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(async() => {_searchProcessing=true;await InviteUser(@_searchResultUser!); await UpdateSearchResultGroupUser(); _searchProcessing=false;})">
                                <ProcessingButtonComponent Processing=@_searchProcessing>Invite to group</ProcessingButtonComponent>
                            </MudButton>
                        }
                        else if (_searchResultGroupUser.Role == GroupRole.PendingAcceptance)
                        {
                            <MudButtonGroup Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                                <MudButton Disabled="@_searchProcessing" Color="Color.Success" OnClick="@(async() => {_searchProcessing=true; await AcceptUser(@_searchResultGroupUser!); await UpdateSearchResultGroupUser(); _searchProcessing=false;})">
                                    <ProcessingButtonComponent Processing=@_searchProcessing>Accept invite</ProcessingButtonComponent>
                                </MudButton>
                                <MudButton Disabled="@_searchProcessing" Color="Color.Error" OnClick="@(async() => {_searchProcessing=true;await RejectUser(@_searchResultGroupUser!); await UpdateSearchResultGroupUser(); _searchProcessing=false;})">
                                    <ProcessingButtonComponent Processing=@_searchProcessing>Reject invite</ProcessingButtonComponent>
                                </MudButton>
                            </MudButtonGroup>
                        }
                        else if (_searchResultGroupUser.Role == GroupRole.Invited)
                        {
                            <MudButton Disabled="@_searchProcessing" Size="Size.Small" Color="Color.Warning" Variant="Variant.Filled" OnClick="@(async() => {_searchProcessing=true;await CancelInviteUser(@_searchResultUser!); await UpdateSearchResultGroupUser(); _searchProcessing=false;})">
                                <ProcessingButtonComponent Processing=@_searchProcessing>Cancel invite</ProcessingButtonComponent>
                            </MudButton>
                        }
                        else
                        {
                            <MudButton Disabled="@_searchProcessing" Size="Size.Small" Color="Color.Error" Variant="Variant.Filled" OnClick="@(async() => {_searchProcessing=true;await RemoveUser(@_searchResultGroupUser!); await UpdateSearchResultGroupUser(); _searchProcessing=false;})">
                                <ProcessingButtonComponent Processing=@_searchProcessing>Remove user</ProcessingButtonComponent>
                            </MudButton>
                        }
                    }
                </MudCard>

            </ChildContent>
        </MudExpansionPanel>

    </MudExpansionPanels>
}
else
{
    <LoadingComponent></LoadingComponent>
}


@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? GroupId { get; set; }


    private List<GroupUser> _groupUsers = new();
    private List<GroupUser> _pendingApproval = new();
    private List<GroupUser> _invited = new();


    private string _searchString = "";
    private Group? _group;
    private State _pageState = State.LOADING;
    private MudAutocomplete<User> _searchAutocomplete = new();

    private User? _searchResultUser;
    private GroupUser? _searchResultGroupUser;

    private bool _searchProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        if (UserService.IsGroupAdmin(new Group(GroupId ?? Consts.DefaultGroupId)))
        {
            _group = await GroupService.GetGroupInfoAsyncCached(new Group(GroupId ?? Consts.DefaultGroupId));
            _groupUsers = await GroupService.GetGroupUsers(_group!);
            _pendingApproval = await GroupService.GetPendingApprovalUsers(_group!);
            _invited = await GroupService.GetInvitedUsers(_group!);
        }
        else
        {
            _pageState = State.ACCESS_BLOCKED;
        }
        StateHasChanged();
    }

    private bool FilterFunc1(GroupUser groupUser) => FilterFunc(groupUser, _searchString);

    private bool FilterFunc(GroupUser groupUser, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (groupUser.User!.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    private async Task RoleChanged(GroupUser groupUser)
    {
        var result = await GroupService.ChangeRole(groupUser.Group!, groupUser.User!, groupUser.Role);
        if (!result)
            Snackbar.Add($"There was an error changing role", Severity.Error);
        else
            Snackbar.Add($"Role changed successfully", Severity.Success);
    }
    private async Task RemoveUser(GroupUser groupUser)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete '{groupUser.User!.UserName}' user?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<ConfirmationDialogTemplate>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var removeUserResult = await GroupService.RemoveGroupUser(groupUser.Group!, groupUser.User!);
            if (!removeUserResult)
            {
                Snackbar.Add($"There was an error removing '{groupUser.User!.UserName}' user", Severity.Error);
                return;
            }
            _groupUsers.Remove(groupUser);
            Snackbar.Add($"User '{groupUser.User!.UserName}' deleted successfully", Severity.Success);
            StateHasChanged();
        }
    }
    private async Task AcceptUser(GroupUser groupUser)
    {
        var result = await GroupService.AcceptUser(groupUser.Group!, groupUser.User!);
        if (result)
        {
            Snackbar.Add($"User '{groupUser.User!.UserName}' accepted", Severity.Success);
            _pendingApproval.Remove(groupUser);
            groupUser.Role = GroupRole.User;
            _groupUsers.Add(groupUser);
            StateHasChanged();
        }
        else
            Snackbar.Add($"There was an error accepting '{groupUser.User!.UserName}' user", Severity.Error);
    }
    private async Task RejectUser(GroupUser groupUser)
    {
        var result = await GroupService.RejectUser(groupUser.Group!, groupUser.User!);
        if (result)
        {
            Snackbar.Add($"User '{groupUser.User!.UserName}' rejected", Severity.Warning);
            _pendingApproval.Remove(groupUser);
            StateHasChanged();
        }
        else
            Snackbar.Add($"There was an error rejecting '{groupUser.User!.UserName}' user", Severity.Error);
    }
    private async Task InviteUser(User user)
    {
        var result = await GroupService.InviteUser(_group!, user);
        if (result)
        {
            Snackbar.Add($"User '{user.UserName}' invited", Severity.Success);
            _invited.Add(new GroupUser() { Group = _group, User = user });
            StateHasChanged();
        }
        else
            Snackbar.Add($"There was an error inviting '{user.UserName}' user", Severity.Error);
    }
    private async Task CancelInviteUser(GroupUser groupUser)
    {
        await CancelInviteUser(groupUser.User!);
    }
    private async Task CancelInviteUser(User user)
    {
        var result = await GroupService.CancelInviteUser(_group!, user);
        if (result)
        {
            Snackbar.Add($"User '{user.UserName}' invited cancelled", Severity.Warning);
            _invited.Remove(_invited.Where(u => u.User!.Id == user.Id).FirstOrDefault()!);
            StateHasChanged();
        }
        else
            Snackbar.Add($"There was an error canceling ivnitation for '{user.UserName}' user", Severity.Error);
    }
    private async Task OnSearchResult(User entry)
    {
        _searchResultUser = await UserService.GetUserInfoAsync(entry);
        await UpdateSearchResultGroupUser();
        StateHasChanged();
        await _searchAutocomplete.Clear();
    }
    private async Task UpdateSearchResultGroupUser()
    {
        if (_searchResultUser != null)
            _searchResultGroupUser = await GroupService.GetGroupUserAsync(_group!, _searchResultUser);
    }
    private Task<IEnumerable<User>> Search(string userName)
    {
        return UserService.Search(userName);
    }
}
