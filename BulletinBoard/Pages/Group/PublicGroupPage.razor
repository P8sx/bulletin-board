@page "/group"

@attribute [Authorize]

@using BulletinBoard.Pages.Shared.Components
@using BulletinBoard.Services
@using BulletinBoard.Model
@using static BulletinBoard.Extensions.ExtensionsMethod

@using GEmojiSharp.Blazor

@inject ISnackbar Snackbar
@inject IUserService UserService
@inject IGroupService GroupService
@inject NavigationManager NavigationManager

<MudCard Outlined="true" Class="mb-3">

    <MudCardMedia Image="/group_page.svg" Height="200"/>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">Groups</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Class="pt-0">
        <MudText Typo="Typo.body2">Browse in public group or create your own one.</MudText>
    </MudCardContent>
</MudCard>

@if (_pageState == State.ACCESS_BLOCKED)
{
    <AccessBlockedComponent></AccessBlockedComponent>
}
else if (_pageState == State.LOADING)
{
    <LoadingComponent></LoadingComponent>
}
else
{
<MudCard Outlined="true" Class="mb-3">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">Public listed groups</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudCardContent>
            @if (PublicGroups.Any())
            {
                <MudGrid>
                    @foreach (var group in PublicGroups)
                    {
                        <MudItem xs="6" md="6" lg="4" Class="d-flex">
                            <MudCard Outlined="true" Style="width:100%" Class="d-flex flex-column">
                                <MudCardMedia Image="@(GroupImage(group.Image))" Height="200" />
                                <MudCardHeader Class="pb-2">
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h5">@group.Name</MudText>

                                    </CardHeaderContent>
                                     <CardHeaderActions>
                                            <MudMenu Class="mt-2" Icon="@Icons.Material.Filled.Settings" Color="Color.Default" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.TopRight">
                                                <MudMenuItem><MudIcon Icon="@Icons.Filled.Report" Color="Color.Error" Style="vertical-align:middle;" Title="Edit" Class="mr-2" /><span style="vertical-align:middle;">Report</span></MudMenuItem>                                                               
                                            </MudMenu>
                                    </CardHeaderActions>
                                </MudCardHeader>

                                <MudCardContent Class="py-0">
                                    <Emoji>
                                        @group.Description
                                    </Emoji>
                                </MudCardContent>

                                <MudCardActions Class="pt-1 mt-auto d-flex justify-end">
                                    @if (UserService.IsGroupOwner(group))
                                    {
                                        <MudText Typo="Typo.caption" Class="pl-2 mr-auto" Color="Color.Secondary">OWNER</MudText>
                                    }
                                    else if (UserService.IsGroupAdmin(group))
                                    {
                                        <MudText Typo="Typo.caption" Class="pl-2 mr-auto" Color="Color.Warning">ADMIN</MudText>
                                    }
                                    else if (UserService.IsGroupModerator(group))
                                    {
                                        <MudText Typo="Typo.caption" Class="pl-2 mr-auto" Color="Color.Info">MODERATOR</MudText>
                                    }
                                    else if (UserService.IsInGroup(group))
                                    {
                                        <MudText Typo="Typo.caption" Class="pl-2 mr-auto">USER</MudText>
                                    }

                                    @if (UserService.IsInGroup(group))
                                    {
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" Link=@($"/bulletins?groupid={group.Id}")>View</MudButton>
                                    }
                                    else if (UserService.PendingAcceptance(group))
                                    {
                                        <MudButton Variant="Variant.Text" Disabled=true Color="Color.Primary">Pending acceptance</MudButton>
                                    }
                                    else if (UserService.PendingInvitations(group))
                                    {
                                        <MudButton Variant="Variant.Text" Color="Color.Success" OnClick=@(async() => await AcceptInvitation(group))>Accept invitation</MudButton>
                                    }
                                    else
                                    {
                                        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick=@(() => Join(group))>Join</MudButton>
                                    }
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
            else
            {
                <MudText Typo="Typo.h5" Align="Align.Center">Sorry there are no public groups</MudText>
            }
        </MudCardContent>
    </MudCardContent>
</MudCard>
    
}
@code {
    public List<Group> PublicGroups = new();
    private State _pageState = State.LOADING;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await UpdateGroupsInfo();
        _pageState = State.SUCCESS;
    }
    private async Task UpdateGroupsInfo()
    {
        PublicGroups = await GroupService.GetPublicGroups();
    }

    private async void Join(Group group)
    {
        var result = await GroupService.JoinToGroup(group, UserService.User!);
        UserService.UpdateUserGroups();
        await UpdateGroupsInfo();
        StateHasChanged();
    }

    private async Task AcceptInvitation(Group group)
    {
        var result = await GroupService.AcceptInvitation(group, UserService.User!);
        UserService.UpdateUserGroups();
        await UpdateGroupsInfo();
        StateHasChanged();
    }
}
