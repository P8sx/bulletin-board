@page "/group/add"

@using BulletinBoard.Model
@using static BulletinBoard.Extensions.ExtensionsMethod

@using BulletinBoard.Services

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IWebHostEnvironment env
@inject IUserService UserService
@inject IGroupService GroupService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4"><b>Add</b> new group</MudText>
<MudPaper Class="mud-width-full py-8" Elevation="1">
    <EditForm Model="@Group" OnValidSubmit="ValidFormSubmitted">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" Class="px-8">
                <MudText Typo="Typo.h5">Group</MudText>
                <MudTextField Label="Title" HelperText="Name of your group" Variant="Variant.Outlined" @bind-Value="Group.Name" For="@(() => Group.Name)" />
                <MudTextField T="string" Label="Description" HelperText="Short description about your group (Github Emoji are supported)" Lines="5" Variant="Variant.Outlined" @bind-Value="Group.Description" For="@(() => Group.Description)" />
            </MudItem>
            <MudItem xs="12" Class="px-8">
                <MudContainer Class="px-0">
                <MudSwitch @bind-Checked="@Group.PublicListed" Label="Listed" Color="Color.Primary" />
                <MudText Class="pl-3" Typo="Typo.caption">Your group will be publicly listed, any user can view info or request to join.</MudText>
                </MudContainer>
                <MudContainer Class="px-0">
                <MudSwitch @bind-Checked="@Group.AcceptAnyone" Label="Public" Color="Color.Primary" />
                <MudText Class="pl-3" Typo="Typo.caption">No acceptance required</MudText>
                </MudContainer>
                <MudText Typo="Typo.body2"></MudText>
            </MudItem>
            <MudItem xs="12" Class="d-flex flex-column px-8">
                <MudText Typo="Typo.h5">Group image</MudText>
                @if (_imageUpload != null && _imageUpload!.Images.Any())
                {
                    <MudCard>
                        <MudCardMedia Image=@_imageUpload!.Images.First().base64Image Height="200" />
                        <MudCardActions Class="d-flex justify-space-between">
                            <MudText Typo="Typo.caption">@_imageUpload!.Images.First().browserFile.Name </MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => _imageUpload.RemoveImage(_imageUpload!.Images.First()))"></MudIconButton>
                        </MudCardActions>
                    </MudCard>
                }
                <ImageUploadComponent @ref="_imageUpload" ImageUpdateCallback="UpdateImages" NumberOfFiles=1></ImageUploadComponent>

            </MudItem>
        </MudGrid>
        <MudElement Class="d-flex justify-end mr-6">
            <MudButton Variant="Variant.Filled" Color="Color.Success" ButtonType="ButtonType.Submit" Class="mt-3" EndIcon="@Icons.Filled.Save">Submit</MudButton>
        </MudElement>
    </EditForm>
    <MudOverlay Visible="_blocked" DarkBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true" />
    </MudOverlay>
</MudPaper>


@code {
    public Group Group { get; set; } = new();

    private bool _blocked = false;
    private ImageUploadComponent? _imageUpload;
    protected async Task UpdateImages(bool update) => await InvokeAsync(() => StateHasChanged());


    protected override async Task OnInitializedAsync()
    {
        Group.PublicListed = false;
        await base.OnInitializedAsync();
    }
    private async Task ValidFormSubmitted(EditContext editContext)
    {
        _blocked = true;
        Group.Image = _imageUpload!.GetImages().First();
        var result = await GroupService.AddGroup(Group, UserService.User!);
        if (!result)
        {
            _blocked = false;
            Snackbar.Add($"Group has NOT been created, contact system administrator", Severity.Error);
            return;
        }
        await _imageUpload!.SaveFilesAsync();
        UserService.UpdateUserGroups();
        Snackbar.Add($"Group has been created - redirecting", Severity.Success);
        await Task.Delay(2000);
        NavigationManager.NavigateTo($"bulletin?groupid={Group.Id}");

    }
}
