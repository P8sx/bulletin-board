@using static Services.GlobalService

@using BulletinBoard.Model
@inject ISnackbar _snackbar
@inject IWebHostEnvironment _env


<MudButton Class="mx-auto" Variant="Variant.Filled" HtmlTag="label" Color="Color.Secondary" Icon="@Icons.Filled.Image" for="imgInput">Load pictures</MudButton>
<InputFile OnChange="@LoadFilesAsync" multiple accept=".jpg, .jpeg, .png"
           CustomExtensionMessage="Only .jpg .jpeg and .png files are allowed."
           MaxFileSize="@_globalService.MaxFileSize"
           FileTooLargeMessage="File is too large" hidden
           id="imgInput"/>


@code {
    
    [Parameter]
    public EventCallback<bool> ImageUpdateCallback { get; set; }


    private List<string> AcceptedFormat { get; set; } = new() {"image/jpeg", "image/png", "image/jpg"};

    public List<(IBrowserFile browserFile, Image image, string base64Image)> Images { get; private set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    private async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        Images.Clear();
        foreach (var file in e.GetMultipleFiles(_globalService.MaxImagesPerBulletin))
        {
            if (!AcceptedFormat.Contains(file.ContentType))
            {
                _snackbar.Add($"File {file.Name} has wrong format only (.jpg, .jpeg, .png)", Severity.Error);
                continue;
            }
            if (file.Size >= _globalService.MaxFileSize)
            {
                _snackbar.Add($"File {file.Name} is too large {Math.Round((float) file.Size / 1024 * 1024, 2)}MB, max size is {_globalService.MaxFileSize / 1024 * 1024}MB", Severity.Warning);
                continue;
            }
            var format = file.Name.Split('.').Last();
            var resizedImageFile = await file.RequestImageFileAsync($"image/jpeg", 500, 500);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);

            Images.Add(new ValueTuple<IBrowserFile, Image, string>(file, new Image(file.Name), $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}"));
        }
        await ImageUpdateCallback.InvokeAsync(true);
    }

    public async Task<bool> SaveFilesAsync()
    {
        if (!Images.Any()) return true;
        foreach (var (browserFile, image, _) in Images)
        {
            var stream = browserFile.OpenReadStream(_globalService.MaxFileSize);
            var folder = $"{_env.WebRootPath}/{_globalService.DefaultImageFolder}";
            if (!Directory.Exists(folder)) Directory.CreateDirectory(folder);
            var fs = File.Create($"{_env.WebRootPath}/{_globalService.BulletinImage(image)}");
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
        }
        return true;
    }

    public List<Image> GetImages() => Enumerable.Range(0, Images.Count).Select(i => Images[i].image).ToList();

    public void RemoveImage((IBrowserFile browserFile, Image image, string base64Image) image)
    {
        Images.Remove(image);
    }


}