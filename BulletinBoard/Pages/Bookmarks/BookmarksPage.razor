@page "/bulletin/bookmark"
@attribute [Authorize(Roles ="User, Moderator, Admin")]

@using BulletinBoard.Pages.Shared.Components
@using BulletinBoard.Services
@using BulletinBoard.Data
@using BulletinBoard.Model
@using BulletinBoard.Pages.Bulletin.Components
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components;


@using static Services.GlobalService

@inject IBoardService _boardService
@inject IBulletinService _bulletinService
@inject NavigationManager _navigationManager

@if (_pageState == State.Success)
{

    <MudCard Outlined="true" Class="mb-3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4">Your bookmarks</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Class="pt-0">
            <MudText Typo="Typo.body2">These are all your bulletins that you added to bookmarks</MudText>
        </MudCardContent>
    </MudCard>



    <MudElement Class="d-flex mb-4 justify-end ">
        <MudElement>
            <MudSelect Label="Order" @bind-Value="_bulletinOrderBy" T="BulletinOrderBy" Variant="Variant.Outlined" Style="max-width:280px" SelectedValuesChanged="@(() => UpdateBulletins())">
                @foreach (BulletinOrderBy orderByItem in Enum.GetValues(typeof(BulletinOrderBy)))
                {
                    <MudSelectItem Value="@orderByItem">@orderByItem</MudSelectItem>
                }
            </MudSelect>
        </MudElement>
        <MudElement>
            <MudSelect Label="Sort" @bind-Value="_bulletinSortBy" T="BulletinSortBy" Variant="Variant.Outlined" Style="width:130px" Class="ml-2" SelectedValuesChanged="@(() => UpdateBulletins())">
                @foreach (BulletinSortBy sortByItem in Enum.GetValues(typeof(BulletinSortBy)))
                {
                    <MudSelectItem Value="@sortByItem">@sortByItem</MudSelectItem>
                }
            </MudSelect>
        </MudElement>
        <MudElement>
            <MudSelect T="int" Label="Show" @bind-Value="_bulletinsPerPage" Variant="Variant.Outlined" Style="max-width:80px" Class="ml-2">
                <MudSelectItem T="int" Value="10" />
                <MudSelectItem T="int" Value="30" />
                <MudSelectItem T="int" Value="60" />
            </MudSelect>
        </MudElement>
    </MudElement>



    <MudElement>
        @foreach (var bulletin in _bulletins)
        {
            <CardComponent Bulletin="bulletin" BoardInfo=true></CardComponent>
        }
    </MudElement>

    <MudElement Class="d-flex justify-center">
        <MudPagination Size="Size.Large" BoundaryCount="2" MiddleCount="3" Count="NumberOfPages()" SelectedChanged="PageChanged" />
    </MudElement>

}
else
{
    <LoadingComponent></LoadingComponent>
}
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; } = 1;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? SortBy { get; set; } = 0;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? OrderBy { get; set; } = 0;



    private int _bulletinsPerPage = 10;
    private int _bulletinsCount = 0;

    private State _pageState = State.Loading;
    private IList<Bulletin> _bulletins = default!;
    private BulletinSortBy _bulletinSortBy = Services.BulletinSortBy.Created;
    private BulletinOrderBy _bulletinOrderBy = Services.BulletinOrderBy.Ascending;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        Page = Page ?? 1;
        
        _bulletinSortBy = (BulletinSortBy)((SortBy??1)%4);
        _bulletinOrderBy = (BulletinOrderBy)((OrderBy??1)%2);    
        _bulletins = await GetBulletins();
        _bulletinsCount = await GetBulletinsCount();
        _pageState = State.Success;
        
        StateHasChanged();
    }

    private void PageChanged(int page)
    {
        _navigationManager.NavigateTo($"/bulletin/myBulletins?page={page}");
    }

    private async Task<IList<Bulletin>> GetBulletins()
    {
        return await _bulletinService.GetUserBookmarkBulletinsAsyncCached(Page ?? 1, _bulletinsPerPage >= 30 ? 30 : _bulletinsPerPage, _userService.User!, new BulletinSort(_bulletinSortBy, _bulletinOrderBy));
    }

    private async Task<int> GetBulletinsCount()
    {
        return await _bulletinService.GetUserBookmarkBulletinsCountAsyncCached(_userService.User!);
    }

    private async Task UpdateBulletins()
    {
        _bulletins = await GetBulletins();
        _bulletinsCount = await GetBulletinsCount();
        StateHasChanged();
    }

    private int NumberOfPages()
    {
        return _bulletinsCount == 0 ? 0 : Convert.ToInt32(Math.Ceiling(Convert.ToDouble(_bulletinsCount) / Convert.ToDouble(_bulletinsPerPage)));
    }
}
