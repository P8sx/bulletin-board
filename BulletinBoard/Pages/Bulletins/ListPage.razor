@page "/bulletins"

@using BulletinBoard.Services
@using BulletinBoard.Data
@using BulletinBoard.Model
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components;
@using BulletinBoard.Extensions;

@inject IUserService UserService
@inject IGroupService GroupService
@inject IBulletinService BulletinService
@inject NavigationManager NavigationManager

@if (_pageState == PageState.SUCCESS && _group != null && _bulletins != null)
{

    <MudCard Outlined="true" Class="mb-3">
        @if (_group.Image != null)
        {
            <MudCardMedia Image=@(_group.Image.GetPath()) Height="200" />
        }
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4">@_group.Name</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.body2">@_group.Description</MudText>
        </MudCardContent>
    </MudCard>



    <MudElement Class="d-flex mb-4 justify-end ">
        <MudElement>
            <MudSelect Label="Order" @bind-Value="_orderBy" T="OrderBy" Variant="Variant.Outlined" Style="max-width:280px" SelectedValuesChanged="@(() => GetBulletins())">
                @foreach (OrderBy orderByItem in Enum.GetValues(typeof(OrderBy)))
                {
                    <MudSelectItem Value="@orderByItem">@orderByItem</MudSelectItem>
                }
            </MudSelect>
        </MudElement>
        <MudElement>
            <MudSelect Label="Sort" @bind-Value="_sortBy" T="SortBy" Variant="Variant.Outlined" Style="width:130px" Class="ml-2" SelectedValuesChanged="@(() => GetBulletins())">
                @foreach (SortBy sortByItem in Enum.GetValues(typeof(SortBy)))
                {
                    <MudSelectItem Value="@sortByItem">@sortByItem</MudSelectItem>
                }
            </MudSelect>
        </MudElement>
        <MudElement>
            <MudSelect T="int" Label="Show" @bind-Value="_bulletinsPerPage" Variant="Variant.Outlined" Style="max-width:80px" Class="ml-2">
                <MudSelectItem T="int" Value="10" />
                <MudSelectItem T="int" Value="30" />
                <MudSelectItem T="int" Value="60" />
            </MudSelect>
        </MudElement>
    </MudElement>



    <MudElement>
        @foreach (var bulletin in _bulletins)
        {
            <CardComponent Bulletin="bulletin"></CardComponent>
        }
    </MudElement>

    <MudElement Class="d-flex justify-center">
        <MudPagination Size="Size.Large" BoundaryCount="2" MiddleCount="3" Count="NumberOfPages()" SelectedChanged="PageChanged" />
    </MudElement>

}
else if (_pageState == PageState.ACCESS_BLOCKED)
{
    <AccessBlockedComponent></AccessBlockedComponent>
}
else
{
    <LoadingComponent></LoadingComponent>
}
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? GroupId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; } = 1;

    public SortBy _sortBy = SortBy.Created;
    public OrderBy _orderBy = OrderBy.Ascending;


    private PageState _pageState = PageState.LOADING;

    private Group? _group;

    public int _bulletinsPerPage = 10;
    private IList<Bulletin> _bulletins = default!;
    private int _bulletinsCount = 0;


    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        GroupId = GroupId ?? Const.DefaultGroupId;
        Page = Page ?? 1;
        if (UserService.IsInGroup(new Group(GroupId ?? Const.DefaultGroupId)))
        {
            _pageState = PageState.SUCCESS;
            if (_group == null) _group = await GroupService.GetGroupInfoAsyncCached(new Group(GroupId ?? Const.DefaultGroupId));
            await GetBulletins();
        }
        else
        {
            _pageState = PageState.ACCESS_BLOCKED;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected void PageChanged(int page)
    {
        Page = page;
        NavigationManager.NavigateTo($"/bulletins?groupid{GroupId}&page={page}");
    }
    protected async Task GetBulletins()
    {
        _bulletins = await BulletinService.GetBulletinsAsyncCached(Page ?? 1, _bulletinsPerPage >= 30 ? 30 : _bulletinsPerPage, UserService.User!, _group!, new BulletinSort(_sortBy, _orderBy));
        _bulletinsCount = await BulletinService.GetBulletinsCountAsyncCached(_group!);
        base.StateHasChanged();
    }
    private int NumberOfPages()
    {
        if (_bulletinsCount == 0) return 0;
        return Convert.ToInt32(Math.Ceiling(Convert.ToDouble(_bulletinsCount) / Convert.ToDouble(_bulletinsPerPage)));
    }
}
