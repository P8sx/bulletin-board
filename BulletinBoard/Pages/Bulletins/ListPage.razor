@page "/bulletins"

@using BulletinBoard.Services
@using BulletinBoard.Data
@using BulletinBoard.Model
@using BulletinBoard.DTOs
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components;

@inherits MainComponent

@inject IJSRuntime JS

@if (Group == 1 || IsInGroup(Group ?? 1))
{

    @if (_groupInfo != null)
    {
        <MudCard Class="mb-5">
            @if (_groupInfo.Image != null)
            {
                <MudCardMedia Image=@(_groupInfo.Image.GetPath()) Height="200" />
            }
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h4">@_groupInfo.Name</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.body2">@_groupInfo.Description</MudText>
            </MudCardContent>
        </MudCard>
    }


    <MudElement Class="d-flex mb-4 justify-end ">
        <MudElement>
            <MudSelect Label="Order" @bind-Value="_orderBy" T="OrderBy" Variant="Variant.Outlined" Style="max-width:280px" SelectedValuesChanged="@(() => GetBulletins())">
                @foreach (OrderBy orderByItem in Enum.GetValues(typeof(OrderBy)))
                {
                    <MudSelectItem Value="@orderByItem">@orderByItem</MudSelectItem>
                }
            </MudSelect>
        </MudElement>
        <MudElement>
            <MudSelect Label="Sort" @bind-Value="_sortBy" T="SortBy" Variant="Variant.Outlined" Style="width:130px" Class="ml-2" SelectedValuesChanged="@(() => GetBulletins())">
                @foreach (SortBy sortByItem in Enum.GetValues(typeof(SortBy)))
                {
                    <MudSelectItem Value="@sortByItem">@sortByItem</MudSelectItem>
                }
            </MudSelect>
        </MudElement>
        <MudElement>
            <MudSelect T="int" Label="Show" @bind-Value="_bulletinsPerPage" Variant="Variant.Outlined" Style="max-width:80px" Class="ml-2">
                <MudSelectItem T="int" Value="10" />
                <MudSelectItem T="int" Value="30" />
                <MudSelectItem T="int" Value="60" />
            </MudSelect>
        </MudElement>
    </MudElement>


    @if (_bulletins != null)
    {
        <MudElement>
            @foreach (var bulletin in _bulletins)
            {
                <CardComponent Bulletin="bulletin"></CardComponent>
            }
        </MudElement>
        <MudElement Class="d-flex justify-center">
            <MudPagination Size="Size.Large" BoundaryCount="2" MiddleCount="3" Count="NumberOfPages()" SelectedChanged="PageChanged" />
        </MudElement>

    }
    else
    {
        <MudElement Class="d-flex flex-column">
            <MudProgressCircular Color="Color.Primary" Style="height:200px;width:200px;" Class="mx-auto mt-15" Indeterminate="true" />
            <MudText Typo="Typo.h4" Class="mx-auto mt-15">Loading bulletins</MudText>
        </MudElement>
    }
}
else
{
    <MudElement Class="d-flex justify-center">
        <MudText Typo="Typo.h3" Class="mr-auto">Sorry but there is nothing here</MudText>
    </MudElement>
}
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public long? Group { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; } = 1;

    [Inject]
    protected IBulletinService _bulletinService { get; set; }
    [Inject]
    protected IDialogService _dialogService { get; set; }
    [Inject]
    protected NavigationManager _navigationManager { get; set; }

    public SortBy _sortBy = SortBy.Created;
    public OrderBy _orderBy = OrderBy.Ascending;

    public int _bulletinsPerPage = 10;
    private Group _groupInfo;
    private IList<BulletinInfoDTO> _bulletins = default!;
    private int _bulletinsCount = 0;


    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        Group = Group ?? 1;
        Page = Page ?? 1;
        if (IsInGroup(Group ?? 1))
        {
            if (_groupInfo == null) _groupInfo = await _groupService.GetGroupAsync((ulong)Group);
            await GetBulletins();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected async Task PageChanged(int page)
    {
        Page = page;
        _navigationManager.NavigateTo($"/bulletins?group{Group}&page={page}");
    }
    protected async Task GetBulletins()
    {
        _bulletins = await _bulletinService.GetBulletinsAsyncCached(Page ?? 1, _bulletinsPerPage >= 30 ? 30 : _bulletinsPerPage, _user, _groupInfo, new BulletinSort(_sortBy, _orderBy));
        _bulletinsCount = await _bulletinService.GetBulletinsCountAsyncCached(_user, _groupInfo);
        base.StateHasChanged();
    }
    private int NumberOfPages()
    {
        if (_bulletinsCount == 0) return 0;
        return Convert.ToInt32(Math.Ceiling(Convert.ToDouble(_bulletinsCount) / Convert.ToDouble(_bulletinsPerPage)));
    }
}
