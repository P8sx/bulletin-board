@page "/board/add"
@using BulletinBoard.Model

@using BulletinBoard.Pages.Shared.Components

@attribute [Authorize(Roles ="User, Moderator, Admin")]

@inject IWebHostEnvironment _env
@inject IBoardService _boardService
@inject NavigationManager _navigationManager

<MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4"><b>Add</b> new board</MudText>
<MudPaper Class="mud-width-full py-8" Elevation="1">
    <EditForm Model="@Board" OnValidSubmit="ValidFormSubmitted">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" Class="px-8">
                <MudText Typo="Typo.h5">Board</MudText>
                <MudTextField Label="Title" HelperText="Name of your board" Variant="Variant.Outlined" @bind-Value="Board.Name" For="@(() => Board.Name)" />
                <MudTextField T="string" Label="Description" HelperText="Short description about your board (Github Emoji are supported)" Lines="5" Variant="Variant.Outlined" @bind-Value="Board.Description" For="@(() => Board.Description)" />
            </MudItem>
            <MudItem xs="12" Class="px-8">
                <MudContainer Class="px-0">
                    <MudSwitch @bind-Checked="@Board.PublicListed" Label="Listed" Color="Color.Primary" />
                    <MudText Class="pl-3" Typo="Typo.caption">Your board will be publicly listed, any user can view info or request to join.</MudText>
                </MudContainer>
                <MudContainer Class="px-0">
                    <MudSwitch @bind-Checked="@Board.AcceptAnyone" Label="Public" Color="Color.Primary" />
                    <MudText Class="pl-3" Typo="Typo.caption">No acceptance required</MudText>
                </MudContainer>
                <MudContainer Class="px-0">
                        <MudSwitch @bind-Checked="@Board.ReadOnly" Label="Readonly" Color="Color.Primary" />
                        <MudText Class="pl-3" Typo="Typo.caption">Users can't post bulletins</MudText>
                </MudContainer>
                <MudText Typo="Typo.body2"></MudText>
            </MudItem>
            <MudItem xs="12" Class="d-flex flex-column px-8">
                <MudText Typo="Typo.h5">Board image</MudText>
                @if (_imageUpload != null && _imageUpload!.Images.Any())
                {
                    <MudCard>
                        <MudCardMedia Image=@_imageUpload!.Images.First().base64Image Height="200" />
                        <MudCardActions Class="d-flex justify-space-between">
                            <MudText Typo="Typo.caption">@_imageUpload!.Images.First().browserFile.Name </MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => _imageUpload.RemoveImage(_imageUpload!.Images.First()))"></MudIconButton>
                        </MudCardActions>
                    </MudCard>
                }
                <ImageUploadComponent @ref="_imageUpload" ImageUpdateCallback="UpdateImages"></ImageUploadComponent>

            </MudItem>
        </MudGrid>
        <MudElement Class="d-flex justify-end mr-6">
            <MudButton Disabled="_processing" Variant="Variant.Filled" Color="Color.Success" ButtonType="ButtonType.Submit" Class="mt-3" EndIcon="@Icons.Filled.Save">
                <ProcessingButtonComponent Processing="_processing">Submit</ProcessingButtonComponent>
            </MudButton>
        </MudElement>
    </EditForm>
</MudPaper>


@code {
    private Board Board { get; set; } = new();
    private bool _processing;
    private ImageUploadComponent? _imageUpload;
    private async Task UpdateImages(bool update) => await InvokeAsync(StateHasChanged);


    protected override async Task OnInitializedAsync()
    {
        Board.PublicListed = false;
        await base.OnInitializedAsync();
    }
    private async Task ValidFormSubmitted(EditContext editContext)
    {
        _processing = true;
        if(_imageUpload!.GetImages().Any())
            Board.Image = _imageUpload!.GetImages().First();
        var result = await _boardService.AddBoardAsync(Board, _userService.User!);
        if (!result)
        {
            _processing = false;
            _snackbar.Add($"Board has NOT been created, contact system administrator", Severity.Error);
            return;
        }
        if(_imageUpload!.GetImages().Any())
            await _imageUpload!.SaveFilesAsync();
        _userService.UpdateUserBoards();
        _snackbar.Add($"Board has been created - redirecting", Severity.Success);
        await Task.Delay(2000);
        _navigationManager.NavigateTo($"bulletins?boardGuid={Board.Guid}");

    }
}
