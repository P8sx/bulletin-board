@page "/board/settings"

@using BulletinBoard.Pages.Shared.Components
@using BulletinBoard.Model
@using Microsoft.AspNetCore.Components;
@using static Services.GlobalService


@inject IBoardService _boardService
@inject IBulletinService _bulletinService
@inject ISnackbar _snackbar
@inject IDialogService _dialogService
@inject NavigationManager _navigationManager



@if (_pageState == State.AccessBlocked)
{
    <AccessBlockedComponent></AccessBlockedComponent>
}
else if (_board != null)
{
    <MudCard Outlined="true" Class="mb-3">

        <MudCardMedia Image="/control_panel.svg" Height="200" Style="background-position:top" />
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4"><strong>@_board.Name</strong> - Boad panel</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Class="pt-0">
            <MudText Typo="Typo.body2">Manage board users and settings</MudText>
        </MudCardContent>
    </MudCard>

    <MudExpansionPanels MultiExpansion="true">
        @*BoardSettings*@
        @if (_userService.IsBoardOwner(_board))
        {
            <MudExpansionPanel IsInitiallyExpanded=false HideIcon="true">
                <TitleContent>
                    <div class="d-flex">
                        <MudText Typo="Typo.h5">Board settings</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.Settings" Class="d-flex ml-auto" Color="Color.Default" />
                    </div>
                </TitleContent>
                <ChildContent>
                    <EditForm Model="@_board" OnValidSubmit="ValidFormSubmitted">
                        <DataAnnotationsValidator />
                        <MudGrid>
                            <MudItem xs="12" Class="px-8">
                                <MudTextField T="string" Label="Description" HelperText="Short description about your board (Github Emoji are supported)" Lines="5" Variant="Variant.Outlined" @bind-Value="_board.Description" For="@(() => _board.Description)" />
                            </MudItem>
                            <MudItem xs="12" Class="px-8">
                                <MudContainer Class="px-0">
                                    <MudSwitch @bind-Checked="@_board.PublicListed" Label="Listed" Color="Color.Primary" />
                                    <MudText Class="pl-3" Typo="Typo.caption">Your board will be publicly listed, any user can view info or request to join.</MudText>
                                </MudContainer>
                                <MudContainer Class="px-0">
                                    <MudSwitch @bind-Checked="@_board.AcceptAnyone" Label="Public" Color="Color.Primary" />
                                    <MudText Class="pl-3" Typo="Typo.caption">No acceptance required</MudText>
                                </MudContainer>
                                <MudText Typo="Typo.body2"></MudText>
                            </MudItem>
                        </MudGrid>
                        <MudElement Class="d-flex justify-end mr-6">
                            <MudButton Disabled="_processing" Variant="Variant.Filled" Color="Color.Success" ButtonType="ButtonType.Submit" Class="mt-3" EndIcon="@Icons.Filled.Save">
                                <ProcessingButtonComponent Processing="_processing">Submit</ProcessingButtonComponent>
                            </MudButton>
                        </MudElement>
                    </EditForm>

                </ChildContent>
            </MudExpansionPanel>
        }


        @*User panel*@
        <MudExpansionPanel IsInitiallyExpanded=false HideIcon="true">
            <TitleContent>
                <div class="d-flex">
                    <MudText Typo="Typo.h5">Users</MudText>
                    @if (_boardUsers.Any())
                    {
                        <MudBadge Content=@_boardUsers.Count Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                            <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Default" />
                        </MudBadge>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.People" Class="d-flex ml-auto" Color="Color.Default" />
                    }
                </div>
            </TitleContent>
            <ChildContent>

                <MudTable Items="@_boardUsers" Hover=true Striped=true Filter="new Func<BoardUser,bool>(FilterFunc1)" Elevation="0">
                    <ToolBarContent>
                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Username</MudTh>
                        <MudTh>Joined</MudTh>
                        <MudTh>Role</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Username">@context.User!.UserName</MudTd>
                        <MudTd DataLabel="Joined">@context.Joined</MudTd>
                        <MudTd DataLabel="Role">
                            <MudSelect Disabled="@(@context.Role==BoardRole.Owner)" Class="mt-0" T="BoardRole" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@context.Role" SelectedValuesChanged="@(()=>RoleChanged(@context))">
                                <MudSelectItem Value="@(BoardRole.User)" />
                                <MudSelectItem Value="@(BoardRole.Moderator)" />
                                <MudSelectItem Value="@(BoardRole.Admin)" />
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Action"><MudButton Disabled="@(@context.Role==BoardRole.Owner)" Color="Color.Error" OnClick="@(async() => await RemoveUser(@context))">Delete</MudButton></MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </ChildContent>
        </MudExpansionPanel>

        @*Pending approval panel*@
        <MudExpansionPanel IsInitiallyExpanded=false HideIcon="true" Disabled="!_pendingApproval.Any()">
            <TitleContent>
                <div class="d-flex">
                    <MudText Typo="Typo.h5">Pending approval</MudText>
                    @if (_pendingApproval.Any())
                    {
                        <MudBadge Content=@_pendingApproval.Count Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                            <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Default" />
                        </MudBadge>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Email" Class="d-flex ml-auto" Color="Color.Default" />
                    }
                </div>
            </TitleContent>
            <ChildContent>
                <MudTable Items="@_pendingApproval" Hover=true Striped=true Filter="new Func<BoardUser,bool>(FilterFunc1)" Elevation="0">
                    <ToolBarContent>
                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Username</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Username">@context.User!.UserName</MudTd>
                        <MudTd DataLabel="Action">
                            <MudButton Color="Color.Success" OnClick="@(async() => await AcceptUser(@context))">Accept</MudButton>
                            <MudButton Color="Color.Error" OnClick="@(async() => await RejectUser(@context))">Reject</MudButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </ChildContent>
        </MudExpansionPanel>

        @*Invited users panel*@
        <MudExpansionPanel IsInitiallyExpanded=false HideIcon="true" Disabled="!_invited.Any()">
            <TitleContent>
                <div class="d-flex">
                    <MudText Typo="Typo.h5">Invited</MudText>
                    @if (_invited.Any())
                    {
                        <MudBadge Content=@_invited.Count Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                            <MudIcon Icon="@Icons.Material.Filled.InsertInvitation" Color="Color.Default" />
                        </MudBadge>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.InsertInvitation" Class="d-flex ml-auto" Color="Color.Default" />
                    }
                </div>
            </TitleContent>
            <ChildContent>
                <MudTable Items="@_invited" Hover=true Striped=true Filter="new Func<BoardUser,bool>(FilterFunc1)" Elevation="0">
                    <ToolBarContent>
                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Username</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Username">@context.User!.UserName</MudTd>
                        <MudTd DataLabel="Action">
                            <MudButton Color="Color.Error" OnClick="@(async() => await CancelInviteUser(@context))">Cancel</MudButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </ChildContent>
        </MudExpansionPanel>

        @*Search users panel*@
        <MudExpansionPanel IsInitiallyExpanded=false HideIcon="true">
            <TitleContent>
                <div class="d-flex">
                    <MudText Typo="Typo.h5">Add new users</MudText>
                    <MudIcon Icon="@Icons.Material.Filled.Search" Class="d-flex ml-auto" Color="Color.Default" />
                </div>
            </TitleContent>
            <ChildContent>
                <MudAutocomplete AutoFocus="true" @ref="_searchAutocomplete" T="User" Placeholder="Search" SearchFunc="Search" ValueChanged="OnSearchResult" Class="docs-search-bar mx-4" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search">
                    <ItemTemplate Context="result">
                        <MudText>@result.UserName</MudText>
                    </ItemTemplate>
                </MudAutocomplete>
                <MudCard Elevation="0" Class="mx-3 mt-6 d-flex">
                    @if (_searchResultUser != null)
                    {
                        <MudAvatar Image=@_globalService.AvatarImage(_searchResultUser.Image)></MudAvatar>
                        <MudText Class="pl-3 mr-auto">@_searchResultUser.UserName</MudText>
                        @if (_searchResultBoardUser == null)
                        {
                            <MudButton Disabled="@_searchProcessing" Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(async() => {_searchProcessing=true;await InviteUser(@_searchResultUser!); await UpdateSearchResultBoardUser(); _searchProcessing=false;})">
                                <ProcessingButtonComponent Processing=@_searchProcessing>Invite to board</ProcessingButtonComponent>
                            </MudButton>
                        }
                        else if (_searchResultBoardUser.Role == BoardRole.PendingAcceptance)
                        {
                            <MudButtonGroup Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                                <MudButton Disabled="@_searchProcessing" Color="Color.Success" OnClick="@(async() => {_searchProcessing=true; await AcceptUser(_searchResultBoardUser!); await UpdateSearchResultBoardUser(); _searchProcessing=false;})">
                                    <ProcessingButtonComponent Processing=@_searchProcessing>Accept invite</ProcessingButtonComponent>
                                </MudButton>
                                <MudButton Disabled="@_searchProcessing" Color="Color.Error" OnClick="@(async() => {_searchProcessing=true;await RejectUser(_searchResultBoardUser!); await UpdateSearchResultBoardUser(); _searchProcessing=false;})">
                                    <ProcessingButtonComponent Processing=@_searchProcessing>Reject invite</ProcessingButtonComponent>
                                </MudButton>
                            </MudButtonGroup>
                        }
                        else if (_searchResultBoardUser.Role == BoardRole.Invited)
                        {
                            <MudButton Disabled="@_searchProcessing" Size="Size.Small" Color="Color.Warning" Variant="Variant.Filled" OnClick="@(async() => {_searchProcessing=true;await CancelInviteUser(@_searchResultUser!); await UpdateSearchResultBoardUser(); _searchProcessing=false;})">
                                <ProcessingButtonComponent Processing=@_searchProcessing>Cancel invite</ProcessingButtonComponent>
                            </MudButton>
                        }
                        else
                        {
                            <MudButton Disabled="@_searchProcessing" Size="Size.Small" Color="Color.Error" Variant="Variant.Filled" OnClick="@(async() => {_searchProcessing=true;await RemoveUser(_searchResultBoardUser!); await UpdateSearchResultBoardUser(); _searchProcessing=false;})">
                                <ProcessingButtonComponent Processing=@_searchProcessing>Remove user</ProcessingButtonComponent>
                            </MudButton>
                        }
                    }
                </MudCard>

            </ChildContent>
        </MudExpansionPanel>

    </MudExpansionPanels>
}
else
{
    <LoadingComponent></LoadingComponent>
}


@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? BoardGuid { get; set; }


    private List<BoardUser> _boardUsers = new();
    private List<BoardUser> _pendingApproval = new();
    private List<BoardUser> _invited = new();

    private string _searchString = "";
    private Board? _board;
    private State _pageState = State.Loading;
    private MudAutocomplete<User> _searchAutocomplete = new();

    private User? _searchResultUser;
    private BoardUser? _searchResultBoardUser;

    private bool _searchProcessing;
    private bool _processing;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        _board = await _boardService.GetBoardAsync(new Board(BoardGuid ?? _globalService.DefaultBoardGuid));
        if (_board != null && _userService.IsBoardAdmin(new Board(_board.Id)))
        {
            _boardUsers = await _boardService.GetBoardUsers(_board!);
            _pendingApproval = await _boardService.GetPendingApprovalUsers(_board!);
            _invited = await _boardService.GetInvitedUsers(_board!);
        }
        else
        {
            _pageState = State.AccessBlocked;
        }
        StateHasChanged();
    }

    private bool FilterFunc1(BoardUser boardUser) => FilterFunc(boardUser, _searchString);
    private static bool FilterFunc(BoardUser boardUser, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return boardUser.User!.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }


    private async Task RoleChanged(BoardUser boardUser)
    {
        var result = await _boardService.ChangeRole(boardUser.Board!, boardUser.User!, boardUser.Role);
        if (!result)
            _snackbar.Add($"There was an error changing role", Severity.Error);
        else
            _snackbar.Add($"Role changed successfully", Severity.Success);
    }
    private async Task RemoveUser(BoardUser boardUser)
    {
        var parameters = new DialogParameters
        {
            {"ContentText", $"Do you really want to delete '{boardUser.User!.UserName}' user?"},
            {"ButtonText", "Delete"},
            {"Color", Color.Error}
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = _dialogService.Show<ConfirmationDialogComponent>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var removeUserResult = await _boardService.RemoveBoardUser(boardUser.Board!, boardUser.User!);
            if (!removeUserResult)
            {
                _snackbar.Add($"There was an error removing '{boardUser.User!.UserName}' user", Severity.Error);
                return;
            }
            _boardUsers.Remove(boardUser);
            _snackbar.Add($"User '{boardUser.User!.UserName}' deleted successfully", Severity.Success);
            StateHasChanged();
        }
    }
    private async Task AcceptUser(BoardUser boardUser)
    {
        var result = await _boardService.AcceptUser(boardUser.Board!, boardUser.User!);
        if (result)
        {
            _snackbar.Add($"User '{boardUser.User!.UserName}' accepted", Severity.Success);
            _pendingApproval.Remove(boardUser);
            boardUser.Role = BoardRole.User;
            _boardUsers.Add(boardUser);
            StateHasChanged();
        }
        else
            _snackbar.Add($"There was an error accepting '{boardUser.User!.UserName}' user", Severity.Error);
    }
    private async Task RejectUser(BoardUser boardUser)
    {
        var result = await _boardService.RejectUser(boardUser.Board!, boardUser.User!);
        if (result)
        {
            _snackbar.Add($"User '{boardUser.User!.UserName}' rejected", Severity.Warning);
            _pendingApproval.Remove(boardUser);
            StateHasChanged();
        }
        else
            _snackbar.Add($"There was an error rejecting '{boardUser.User!.UserName}' user", Severity.Error);
    }
    private async Task InviteUser(User user)
    {
        var result = await _boardService.InviteUser(_board!, user);
        if (result)
        {
            _snackbar.Add($"User '{user.UserName}' invited", Severity.Success);
            _invited.Add(new BoardUser() { Board = _board, User = user });
            StateHasChanged();
        }
        else
            _snackbar.Add($"There was an error inviting '{user.UserName}' user", Severity.Error);
    }
    private async Task CancelInviteUser(BoardUser boardUser)
    {
        await CancelInviteUser(boardUser.User!);
    }
    private async Task CancelInviteUser(User user)
    {
        var result = await _boardService.CancelInviteUser(_board!, user);
        if (result)
        {
            _snackbar.Add($"User '{user.UserName}' invited cancelled", Severity.Warning);
            _invited.Remove(_invited.FirstOrDefault(u => u.User!.Id == user.Id)!);
            StateHasChanged();
        }
        else
            _snackbar.Add($"There was an error canceling invitation for '{user.UserName}' user", Severity.Error);
    }
    private async Task OnSearchResult(User entry)
    {
        _searchResultUser = await _userService.GetUserInfoAsync(entry);
        await UpdateSearchResultBoardUser();
        StateHasChanged();
        await _searchAutocomplete.Clear();
    }
    private async Task UpdateSearchResultBoardUser()
    {
        if (_searchResultUser != null)
            _searchResultBoardUser = await _boardService.GetBoardUserAsync(_board!, _searchResultUser);
    }
    private Task<IEnumerable<User>> Search(string userName)
    {
        return _userService.Search(userName);
    }

    private async Task ValidFormSubmitted(EditContext editContext)
    {
        _processing = true;
        var result = await _boardService.UpdateBoard(_board!);
        if (!result)
        {
            _processing = false;
            _snackbar.Add($"Board has NOT been updated, contact system administrator", Severity.Error);
            return;
        }
        _snackbar.Add($"Board has been updated - reloading", Severity.Success);
        await Task.Delay(1000);
        _navigationManager.NavigateTo($"board/settings?boardGuid={_board!.Guid}", true);
    }
}
