@page "/bulletins"

@using BulletinBoard.Pages.Shared.Components
@using BulletinBoard.Services
@using BulletinBoard.Model
@using Microsoft.AspNetCore.Components;
@using BulletinBoard.Pages.Bulletin.Components
@using static Services.GlobalService


@inject IBoardService _boardService
@inject IBulletinService _bulletinService
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager

@if (_pageState == State.Success && _board != null)
{

    <MudCard Outlined="true" Class="mb-3">
        <MudCardMedia Image=@(_globalService.BoardImage(_board.Image)) Height="200" />        
        <MudCardHeader Class="pb-0">
            <CardHeaderContent>
                <MudText Typo="Typo.h4">@_board.Name</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.body2">@_board.Description</MudText>
        </MudCardContent>
        @if (_userService.IsBoardAdmin(_board))
        {
        <MudCardActions Class="d-flex justify-end">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Link=@($"board/settings?boardGuid={_board.Guid}")>Board panel</MudButton>
        </MudCardActions>
        }
    </MudCard>



    <MudElement Class="d-flex mb-4 justify-end ">
        <MudElement>
            <MudSelect Label="Order" @bind-Value="_orderBy" T="OrderBy" Variant="Variant.Outlined" Style="max-width:280px" SelectedValuesChanged="@(UpdateBulletins)">
                @foreach (OrderBy orderByItem in Enum.GetValues(typeof(OrderBy)))
                {
                    <MudSelectItem Value="@orderByItem">@orderByItem</MudSelectItem>
                }
            </MudSelect>
        </MudElement>
        <MudElement>
            <MudSelect Label="Sort" @bind-Value="_sortBy" T="SortBy" Variant="Variant.Outlined" Style="width:130px" Class="ml-2" SelectedValuesChanged="@(UpdateBulletins)">
                @foreach (SortBy sortByItem in Enum.GetValues(typeof(SortBy)))
                {
                    <MudSelectItem Value="@sortByItem">@sortByItem</MudSelectItem>
                }
            </MudSelect>
        </MudElement>
        <MudElement>
            <MudSelect T="int" Label="Show" @bind-Value="_bulletinsPerPage" Variant="Variant.Outlined" Style="max-width:80px" Class="ml-2">
                <MudSelectItem T="int" Value="10" />
                <MudSelectItem T="int" Value="30" />
                <MudSelectItem T="int" Value="60" />
            </MudSelect>
        </MudElement>
    </MudElement>



    <MudElement>
        @foreach (var bulletin in _bulletins)
        {
            <CardComponent Bulletin="bulletin" BulletinRemovedCallback="RemoveBulletin"></CardComponent>
        }
    </MudElement>

    <MudElement Class="d-flex justify-center">
        <MudPagination Size="Size.Large" BoundaryCount="2" MiddleCount="3" Count="NumberOfPages()" SelectedChanged="PageChanged" />
    </MudElement>
    <MudFab Color="Color.Secondary" Style="position:fixed; bottom: 2rem; right: 2rem" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large" IconSize="Size.Large" Class="ma-2" Link=@($"/bulletin/add?boardGuid={BoardGuid??_globalService.DefaultBoardGuid}")/>
}
else if (_pageState == State.AccessBlocked)
{
    <AccessBlockedComponent></AccessBlockedComponent>
}
else
{
    <LoadingComponent></LoadingComponent>
}
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? BoardGuid { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; } = 1;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? SortBy { get; set; } = 0;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? OrderBy { get; set; } = 0;





    private Board? _board;
    
    private int _bulletinsPerPage = 10;
    private int _bulletinsCount;
    
    private IList<Bulletin> _bulletins = default!;
    private State _pageState = State.Loading;
    private SortBy _sortBy = Services.SortBy.Created;
    private OrderBy _orderBy = Services.OrderBy.Ascending;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        _board = await _boardService.GetBoardAsync(new Board(BoardGuid ?? _globalService.DefaultBoardGuid));
        
        Page = Page ?? 1;
        if (_board != null && _userService.IsInBoard(_board))
        {
            _sortBy = (SortBy)((SortBy??1)%4);
            _orderBy = (OrderBy)((OrderBy??1)%2);
            _bulletins = await GetBulletins();
            _bulletinsCount = await GetBulletinsCount();
            _pageState = State.Success;
        }
        else
        {
            _pageState = State.AccessBlocked;
        }
        StateHasChanged();
    }

     protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    private void PageChanged(int page)
    {
        _navigationManager.NavigateTo($"/bulletins?boardGuid{BoardGuid}&page={page}");
    }

    private async Task<IList<Bulletin>> GetBulletins()
    {
        return await _bulletinService.GetBulletinsAsyncCached(Page ?? 1, _bulletinsPerPage >= 30 ? 30 : _bulletinsPerPage, _userService.User!, _board!, new BulletinSort(_sortBy, _orderBy));
    }

    private async Task<int> GetBulletinsCount()
    {
        return await _bulletinService.GetBulletinsCountAsyncCached(_board!);
    }

    private async Task UpdateBulletins()
    {
        _bulletins = await GetBulletins();
        _bulletinsCount = await GetBulletinsCount();
        StateHasChanged();
    }

    private int NumberOfPages()
    {
        return _bulletinsCount == 0 ? 0 : Convert.ToInt32(Math.Ceiling(Convert.ToDouble(_bulletinsCount) / Convert.ToDouble(_bulletinsPerPage)));
    }

    private async Task RemoveBulletin(Bulletin bulletin)
    {
        var result = await _bulletinService.RemoveBulletin(bulletin);
        if (result)
        {
            _snackbar.Add($"Bulletin has been removed", Severity.Success);
            _bulletins.Remove(bulletin);
            _bulletinsCount--;
        }
        else
            _snackbar.Add($"There was an error removing bulletin - contact system admin", Severity.Error);
    }
}
