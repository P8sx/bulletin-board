@using BulletinBoard.Model
@using BulletinBoard.DTOs
@implements IDisposable

@inherits List

@if (Bulletin != null && Bulletin.User != null)
{
    <MudCard Outlined="true">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Image=@(Bulletin.User.Image==null?"/images/avatars/no_avatar.png":Bulletin.User.Image.GetPath()) />
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">@Bulletin.User.UserName</MudText>
                <MudText Typo="Typo.body2"><strong>Added:</strong> @(((DateTime)Bulletin.Created).ToString("dd.MM.yyyy"))</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.h4">@Bulletin.Title</MudText>
            <MudText Typo="Typo.body2" Class="mt-2" Style="overflow-wrap: break-word;">@Bulletin.Description</MudText>
        </MudCardContent>
        @if (Bulletin.Images.Any())
        {
            <MudCarousel @ref="_carousel" ItemsSource="@Bulletin.Images" Style="height:200px; width:100%" ShowArrows="true" ShowDelimiters="true" AutoCycle="false">
                <ItemTemplate>
                    <div class="d-flex flex-column flex-column justify-center" @onclick="@(e=>OpenDialog(@context.GetPath()))">
                        <MudCardMedia Image=@context.GetPath()/>
                    </div>
                </ItemTemplate>
            </MudCarousel>
        }
        <MudCardActions Class="d-flex">
            <AuthorizeView>
                <Authorized>
                    <MudText Class="pl-3">@Bulletin.VotesCount</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color=@(Bulletin.UserVoted?Color.Secondary:Color.Default) OnClick=Vote />
                    <MudText Class="pl-3">@Bulletin.CommentsCount</MudText>
                    <MudIconButton Icon="@Icons.Filled.Comment" Color="Color.Default" />
                    <MudIconButton Icon="@Icons.Filled.Bookmark" Color=@(Bulletin.UserBookmark?Color.Warning:Color.Default) OnClick=Bookmark Style="margin-left:auto" />
                </Authorized>
                <NotAuthorized>
                    <MudText Class="pl-3">@Bulletin.VotesCount</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" Disabled />
                    <MudText Class="pl-3">@Bulletin.CommentsCount</MudText>
                    <MudIconButton Icon="@Icons.Filled.Comment" Color="Color.Default" />
                    <MudIconButton Icon="@Icons.Filled.Bookmark" Color="Color.Default" Style="margin-left:auto" Disabled />
                </NotAuthorized>
            </AuthorizeView>
            <MudIconButton Icon="@Icons.Filled.ReadMore" Color="Color.Default" />

        </MudCardActions>
    </MudCard>
}



@code {
    [Parameter]
    public BulletinInfoDTO Bulletin { get; set; } = new();
    private MudCarousel<Image?> _carousel;
    private bool _updated = false;
    private void Vote()
    {
        Bulletin.VotesCount = Bulletin.UserVoted ? Bulletin.VotesCount - 1 : Bulletin.VotesCount + 1;
        Bulletin.UserVoted = !Bulletin.UserVoted;
        _bulletinService.Vote(new BulletinVote() { UserId = _user.Id, BulletinId = Bulletin.Id });
    }
    private void Bookmark()
    {
        Bulletin.UserBookmark = !Bulletin.UserBookmark;
        _userService.Bookmark(new BulletinBookmark() { UserId = _user.Id, BulletinId = Bulletin.Id });
    }
    public void Dispose()
    {

    }
    private void OpenDialog(string path)
    {
        var parameters = new DialogParameters();
        parameters.Add("Path", path);
        DialogOptions options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large};
        _dialogService.Show<ImageDialogComponent>("Simple Dialog", parameters, options);
    }
}
