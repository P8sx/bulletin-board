@page "/bulletin/add"

@attribute [Authorize]

@using static BulletinBoard.Extensions.ExtensionsMethod

@using BulletinBoard.Model
@using System.IO
@using BulletinBoard.Pages.Shared.Components
@using Microsoft.AspNetCore.Identity;
@using BulletinBoard.Services
@using System.Linq;

@inject ISnackbar Snackbar
@inject IWebHostEnvironment env
@inject IUserService UserService
@inject IBulletinService BulletinService
@inject NavigationManager NavigationManager


<MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4"><b>Add</b> new bulletin</MudText>
<MudPaper Class="mud-width-full py-8" Elevation="1">
    <EditForm Model="@Bulletin" OnValidSubmit="ValidFormSubmitted">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" md="12" Class="px-8">
                <MudText Typo="Typo.h5">Bulletin</MudText>
                <MudTextField Label="Title" HelperText="Title of your bulletin" Variant="Variant.Outlined" @bind-Value="Bulletin.Title" For="@(() => Bulletin.Title)" />
                <MudTextField T="string" Label="Description" HelperText="Content of your bulletin (Github Emoji are supported)" Lines="13" Variant="Variant.Outlined" @bind-Value="Bulletin.Description" For="@(() => Bulletin.Description)" />
            </MudItem>
            <MudItem xs="12" md="8" Class="px-8 d-flex">
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h5">Attachments</MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudGrid>
                            @foreach (var img in _imageUpload!.Images)
                            {
                                <MudItem xs="6" md="6">
                                    <MudCard>
                                        <MudCardMedia Image=@img.base64Image Height="200" />
                                        <MudCardActions Class="d-flex justify-space-between">
                                            <MudText Typo="Typo.caption">@img.browserFile.Name</MudText>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => _imageUpload.RemoveImage(img))"></MudIconButton>
                                        </MudCardActions>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>

                    <MudItem xs="12" Class="d-flex flex-column">
                        <ImageUploadComponent @ref="_imageUpload" ImageUpdateCallback="UpdateImages"></ImageUploadComponent>
                        <MudText Class="mt-2" Align=Align.Center>Max 5 images, 5MB each.</MudText>
                    </MudItem>

                </MudGrid>
            </MudItem>
            <MudItem xs="12" md="4" Class="px-8">
                <MudText Typo="Typo.h5">Additional</MudText>
                <MudDatePicker Label="Bulletin expire date" HelperText="Date after witch bulletin will be marked as expired (optional)" Variant="Variant.Outlined" @bind-Date="Bulletin.Expired" For="@(() => Bulletin.Expired)" ReadOnly="false" />
                <MudSelect T="Guid?" Label="Group" Variant="Variant.Outlined" HelperText="Group in which the bulletin will be published" @bind-value="Bulletin.GroupId">
                    @foreach (var group in UserService.GetUserGroups())
                    {
                        <MudSelectItem T="Guid?" Value="@group!.Id">@group!.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

        </MudGrid>
        <MudElement Class="d-flex justify-end mr-6">
            <MudButton Disabled="_processing" Variant="Variant.Filled" Color="Color.Success" ButtonType="ButtonType.Submit" Class="mt-3" EndIcon="@Icons.Filled.Save">
                <ProcessingButtonComponent Processing="_processing">Submit</ProcessingButtonComponent>
            </MudButton>
        </MudElement>
    </EditForm>
</MudPaper>

@code {
    public Bulletin Bulletin { get; set; } = new();

    private ImageUploadComponent? _imageUpload;
    protected async Task UpdateImages(bool update) => await InvokeAsync(() => StateHasChanged());



    private bool _processing = false;
    protected override async Task OnInitializedAsync()
    {
        Bulletin.GroupId = Consts.DefaultGroupId;
        await base.OnInitializedAsync();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }


    // Submit form
    private async Task ValidFormSubmitted(EditContext editContext)
    {
        _processing = true;
        // Set bulletin data
        if (Bulletin.UserId == 0)
            Bulletin.UserId = UserService.User!.Id;
        Bulletin.Created = DateTime.UtcNow;

        // Try save bulletin in db
        Bulletin.Images = _imageUpload!.GetImages();
        var result = await BulletinService.AddBulletin(Bulletin);
        if (!result)
        {
            _processing = false;
            Snackbar.Add($"Bulletin has NOT been added, contact system administrator", Severity.Error);
            return;
        }
        // If bulletin succesfuly added save images on server
        await _imageUpload!.SaveFilesAsync();

        Snackbar.Add($"Bulletin has been added - redirecting", Severity.Success);
        await Task.Delay(2000);
        NavigationManager.NavigateTo($"bulletin?groupid={Bulletin.GroupId}&bulletinid={Bulletin.Id}");
    }
}
