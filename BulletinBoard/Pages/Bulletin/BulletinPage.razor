@page "/bulletin"
@attribute [Authorize(Roles ="User, Moderator, Admin")]

@using static Services.GlobalService

@using BulletinBoard.Model
@using BulletinBoard.Pages.Shared.Components
@using BulletinBoard.Pages.Bulletin.Components

@inject IBulletinService _bulletinService
@inject IDialogService _dialogService
@inject ICommentService _commentService
@inject IJSRuntime _js
@inject IBoardService _boardService
<MudContainer MaxWidth="MaxWidth.Medium" >
@if (_pageState == State.Success && _bulletin != null)
{
    <CardComponent Bulletin="_bulletin" BulletinRemovedCallback="RemoveBulletin"></CardComponent>

    <MudPaper Outlined="true" Class="py-5 mb-5">
        <AuthorizeView Context="authorizedView">
            <Authorized>
                <AddCommentComponent Bulletin="_bulletin" CommentUpdateCallback="UpdateComments"></AddCommentComponent>
            </Authorized>
            <NotAuthorized>

            </NotAuthorized>
        </AuthorizeView>
    </MudPaper>
    <MudText Typo="Typo.h4" Class="mb-2">Comments</MudText>
    @if (_comments.Any())
    {

        @foreach (var comment in _comments)
        {
            <CommentComponent Comment=comment></CommentComponent>
        }

    }
    else if (_commentState == State.Loading)
    {
        <LoadingComponent></LoadingComponent>
    }
    else
    {
        <MudPaper Outlined="true" Class="py-5">
            <MudText Align="Align.Center">Sorry but there is no comments</MudText>
        </MudPaper>
    }
}
else if (_pageState == State.AccessBlocked)
{
    <AccessBlockedComponent></AccessBlockedComponent>
}
else
{
    <LoadingComponent></LoadingComponent>
}
</MudContainer>
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid BoardGuid { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid BulletinGuid { get; set; }


    private Bulletin? _bulletin;
    private IList<Comment> _comments = default!;
    private State _pageState = State.Loading;
    private State _commentState = State.Loading;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        if (_userService.IsInBoard(new Board(BoardGuid)))
        {
            _bulletin = await _bulletinService.GetBulletinInfoAsyncCached(_userService.User!, new Bulletin(BulletinGuid));
            _comments = await _commentService.GetCommentsAsyncCached(new Bulletin(_bulletin!.Id));
            _commentState = _pageState = State.Success;
        }
        else
        {
            _commentState = _pageState = State.AccessBlocked;
        }
        StateHasChanged();
    }
    

    private async Task UpdateComments(bool update)
    {
        _commentState = State.Loading;
        StateHasChanged();
        _comments = await _commentService.GetCommentsAsyncCached(new Bulletin(_bulletin!.Id), true);
        _commentState = State.Success;
        _bulletin!.CommentsCount++;
        StateHasChanged();
    }

    private async Task RemoveBulletin(Bulletin bulletin)
    {
        var result = await _bulletinService.RemoveBulletinAsync(bulletin);
        if (result)
        {
            _snackbar.Add($"Bulletin has been removed - redirecting", Severity.Success);
            await Task.Delay(2000);
            await _js.InvokeVoidAsync("history.back");
        }
        else
            _snackbar.Add($"There was an error removing bulletin - contact system admin", Severity.Error);
    }
}
