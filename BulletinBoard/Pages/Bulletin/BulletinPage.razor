@page "/bulletin"
@using BulletinBoard.DTOs
@using BulletinBoard.Extensions
@using BulletinBoard.Model
@using BulletinBoard.Pages.Bulletins
@using BulletinBoard.Services
@inherits MainComponent

@if (_pageState == PageState.SUCCESS && _bulletin != null)
{
     <MudCard Outlined="true" Class="mb-5">
        <div style="position: relative;">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Image=@(_bulletin.User.Image==null?"/images/avatars/no_avatar.png":_bulletin.User.Image.GetPath()) />
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">@_bulletin.User.UserName</MudText>
                    <MudText Typo="Typo.body2"><strong>Created:</strong> @(((DateTime)_bulletin.Created).ToString("dd.MM.yyyy")) </MudText>
                    @if (_bulletin.Expired != null)
                    {
                        <MudText Typo="Typo.body2"><strong>Expiring:</strong> @(((DateTime)_bulletin.Expired).ToString("dd.MM.yyyy"))</MudText>
                    }
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudMenu Class="mt-2" Icon="@Icons.Material.Filled.Settings" Color="Color.Default" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.TopRight">
                        <MudMenuItem><MudIcon Icon="@Icons.Filled.Report" Color="Color.Error" Style="vertical-align:middle;" Title="Edit" Class="mr-2"/><span style="vertical-align:middle;">Report</span></MudMenuItem>
                        <MudMenuItem><MudIcon Icon="@Icons.Filled.Delete" Style="vertical-align:middle;" Title="Edit" Class="mr-2"/><span style="vertical-align:middle;">Delete</span></MudMenuItem>
                        <MudMenuItem><MudIcon Icon="@Icons.Filled.Edit" Style="vertical-align:middle;" Title="Edit" Class="mr-2"/><span style="vertical-align:middle;">Edit</span></MudMenuItem>
                    </MudMenu>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent Class="pt-0">
                <MudText Typo="Typo.h4">@_bulletin.Title</MudText>
                <MudText Typo="Typo.body2" Class="mt-2" Style="overflow-wrap: break-word;">@_bulletin.Description</MudText>
                @if (_bulletin.Modified != null)
                {
                    <MudText Typo="Typo.body2" Class="mt-2"><strong>Last modified:</strong> @(((DateTime)_bulletin.Modified).ToString("dd.MM.yyyy"))</MudText>
                }
            </MudCardContent>
            @if (_bulletin.Images.Any())
            {
                <MudHidden Breakpoint="Breakpoint.Lg" Invert="false">
                    <MudCarousel @ref="_carousel" ItemsSource="@_bulletin.Images" Style="height:200px; width:100%" ShowArrows="true" ShowDelimiters="true" AutoCycle="false">
                        <ItemTemplate>
                            <div class="d-flex flex-column flex-column justify-center" @onclick="@(e=>OpenDialog(@context.GetPath()))">
                                <MudCardMedia Image=@context.GetPath() />
                            </div>
                        </ItemTemplate>
                    </MudCarousel>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Lg" Invert="true">
                    <MudGrid Class="px-4">
                        @foreach(var img in _bulletin.Images)
                        {
                            <MudItem xs="4">
                                <div class="d-flex flex-column flex-column justify-center" @onclick="@(e=>OpenDialog(img.GetPath()))">
                                    <MudCardMedia Image=@img.GetPath()/>
                                </div>
                            </MudItem>
                        }
                    </MudGrid>
                </MudHidden>
            }
            @if (_bulletin.Expired != null && _bulletin.Expired < DateTime.UtcNow)
            {
                <MudOverlay Visible="true" LightBackground="true" Absolute="true">
                    <MudChip Color="Color.Error" Class="px-5 py-2 mx-2"><MudText Typo="Typo.h6">This bulletin has expired</MudText></MudChip>
                </MudOverlay>
            }
        </div>
        <MudCardActions Class="d-flex">
            <AuthorizeView>
                <Authorized>
                    <MudText Class="pl-3">@_bulletin.VotesCount</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color=@(_bulletin.UserVoted?Color.Secondary:Color.Default) OnClick=Vote Disabled=@(_bulletin.Expired != null &&_bulletin.Expired<DateTime.UtcNow)/>
                    <MudText Class="pl-3">@_bulletin.CommentsCount</MudText>
                    <MudIconButton Icon="@Icons.Filled.Comment" Color="Color.Default" />
                    <MudIconButton Icon="@Icons.Filled.Bookmark" Color=@(_bulletin.UserBookmark?Color.Warning:Color.Default) OnClick=Bookmark Style="margin-left:auto" />
                </Authorized>
                <NotAuthorized>
                    <MudText Class="pl-3">@_bulletin.VotesCount</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" Disabled />
                    <MudText Class="pl-3">@_bulletin.CommentsCount</MudText>
                    <MudIconButton Icon="@Icons.Filled.Comment" Color="Color.Default" />
                    <MudIconButton Icon="@Icons.Filled.Bookmark" Color="Color.Default" Style="margin-left:auto" Disabled />
                </NotAuthorized>
            </AuthorizeView>
        </MudCardActions>
    </MudCard>
    <MudCard Outlined="true" Class="mb-5">
        aasdd
    </MudCard>

}
else if (_pageState == PageState.ACCESS_BLOCKED)
{
    <AccessBlockedComponent></AccessBlockedComponent>
}
else
{
    <LoadingComponent></LoadingComponent>
}


@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public long Group { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid Bulletin { get; set; }

    [Inject]
    protected IBulletinService _bulletinService { get; set; }
    [Inject]
    protected IDialogService _dialogService { get; set; }

    private BulletinInfoDTO _bulletin = default!;
    private MudCarousel<Image?> _carousel = default!;
    private List<CommentDTO> _comments = default!;

    private PageState _pageState = PageState.LOADING;


    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        if (IsInGroup(Group))
        {
            _pageState = PageState.SUCCESS;       
            _bulletin = await _bulletinService.GetBulletinAsyncCached(_user, Convert.ToUInt64(Group), Bulletin);
        }
        else
        {
            _pageState = PageState.ACCESS_BLOCKED;
        }
        base.StateHasChanged();
    }
    private void Vote()
    {
        _bulletin.VotesCount = _bulletin.UserVoted ? _bulletin.VotesCount - 1 : _bulletin.VotesCount + 1;
        _bulletin.UserVoted = !_bulletin.UserVoted;
        _bulletinService.Vote(new BulletinVote() { UserId = _user.Id, BulletinId = _bulletin.Id });
    }
    private void Bookmark()
    {
        _bulletin.UserBookmark = !_bulletin.UserBookmark;
        _userService.Bookmark(new BulletinBookmark() { UserId = _user.Id, BulletinId = _bulletin.Id });
    }
    public void Dispose()
    {

    }
    private void OpenDialog(string path)
    {
        var parameters = new DialogParameters();
        parameters.Add("Path", path);
        DialogOptions options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large };
        _dialogService.Show<ImageDialogComponent>("Image", parameters, options);
    }
}
