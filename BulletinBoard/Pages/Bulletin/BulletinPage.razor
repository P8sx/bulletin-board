@page "/bulletin"
@using static BulletinBoard.Extensions.ExtensionsMethod

@using BulletinBoard.Model
@using BulletinBoard.Pages.Bulletins
@using BulletinBoard.Services


@inject IBulletinService BulletinService
@inject IDialogService DialogService
@inject IUserService UserService
@inject ICommentService CommentService
@inject IJSRuntime JS
@inject ISnackbar Snackbar


@using GEmojiSharp.Blazor

@if (_pageState == State.SUCCESS && _bulletin != null)
{
    <CardComponent Bulletin="_bulletin" BulletinRemovedCallback="RemoveBulletin"></CardComponent>

    <MudPaper Outlined="true" Class="py-5 mb-5">
        <AuthorizeView Context="authorizedView">
            <Authorized>

                <AddCommentComponent Bulletin="_bulletin" CommentUpdateCallback="UpdateComments"></AddCommentComponent>

            </Authorized>
            <NotAuthorized>

            </NotAuthorized>
        </AuthorizeView>
    </MudPaper>
    <MudText Typo="Typo.h4" Class="mb-2">Comments</MudText>
    @if (_comments != null && _comments.Any())
    {

        @foreach (var comment in _comments)
        {
            <CommentComponent Comment=comment></CommentComponent>
        }

    }
    else if (_commentState == State.LOADING)
    {
        <LoadingComponent></LoadingComponent>
    }
    else
    {
        <MudPaper Outlined="true" Class="py-5">
            <MudText Align="Align.Center">Sorry but there is no comments</MudText>
        </MudPaper>
    }
}
else if (_pageState == State.ACCESS_BLOCKED)
{
    <AccessBlockedComponent></AccessBlockedComponent>
}
else
{
    <LoadingComponent></LoadingComponent>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid GroupId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid BulletinId { get; set; }



    private Bulletin? _bulletin = default!;
    private IList<Comment> _comments = default!;
    private State _pageState = State.LOADING;
    private State _commentState = State.LOADING;

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        if (UserService.IsInGroup(new Group(GroupId)))
        {
            _bulletin = await BulletinService.GetBulletinInfoAsyncCached(UserService.User!, new Bulletin(BulletinId));
            _comments = await CommentService.GetCommentsAsyncCached(new Bulletin(BulletinId));
            _commentState = _pageState = State.SUCCESS;
        }
        else
        {
            _commentState = _pageState = State.ACCESS_BLOCKED;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    protected async Task UpdateComments(bool update)
    {
        _comments = default!;
        _commentState = State.LOADING;
        StateHasChanged();
        _comments = await CommentService.GetCommentsAsyncCached(new Bulletin(BulletinId), true);
        _commentState = State.SUCCESS;
        _bulletin!.CommentsCount++;
        StateHasChanged();
    }

    private void OpenDialog(string path)
    {
        var parameters = new DialogParameters();
        parameters.Add("Path", path);
        DialogService.Show<ImageDialogComponent>("Image", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large });
    }

    protected async Task RemoveBulletin(Bulletin bulletin)
    {
        var result = await BulletinService.RemoveBulletin(bulletin);
        if (result)
        {
            Snackbar.Add($"Bulletin has been removed - redirecting", Severity.Success);
            await Task.Delay(2000);
            await JS.InvokeVoidAsync("history.back");
        }
        else
            Snackbar.Add($"There was an error removing bulletin - contact system admin", Severity.Error);
    }
}
