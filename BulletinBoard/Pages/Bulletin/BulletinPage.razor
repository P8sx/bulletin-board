@page "/bulletin"
@using BulletinBoard.Extensions
@using BulletinBoard.Model
@using BulletinBoard.Pages.Bulletins
@using BulletinBoard.Services


@inject IBulletinService BulletinService
@inject IDialogService DialogService
@inject IUserService UserService
@inject ICommentService CommentService
@inject IJSRuntime JS
@inject ISnackbar Snackbar


@using GEmojiSharp.Blazor

@if (_pageState == State.SUCCESS && _bulletin != null)
{
    @*<MudCard Outlined="true" Class="mb-5">
        <div style="position: relative;">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Image=@(_bulletin.User!.Image==null?"/images/avatars/no_avatar.png":_bulletin.User.Image.GetPath()) />
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">@_bulletin.User!.UserName</MudText>
                    <MudText Typo="Typo.body2"><strong>Created:</strong> @(((DateTime)_bulletin.Created).ToString("dd.MM.yyyy")) </MudText>
                    @if (_bulletin.Expired != null)
                    {
                        <MudText Typo="Typo.body2"><strong>Expiring:</strong> @(((DateTime)_bulletin.Expired).ToString("dd.MM.yyyy"))</MudText>
                    }
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudMenu Class="mt-2" Icon="@Icons.Material.Filled.Settings" Color="Color.Default" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.TopRight">
                        <MudMenuItem><MudIcon Icon="@Icons.Filled.Report" Color="Color.Error" Style="vertical-align:middle;" Title="Edit" Class="mr-2" /><span style="vertical-align:middle;">Report</span></MudMenuItem>
                        @if (UserService.IsGroupModerator(new Group() { Id = _bulletin.Group!.Id }) || UserService.IsBulletinOwner(_bulletin))
                        {
                            <MudMenuItem><MudIcon Icon="@Icons.Filled.Delete" Style="vertical-align:middle;" Title="Edit" Class="mr-2" /><span style="vertical-align:middle;">Delete</span></MudMenuItem>
                            <MudMenuItem><MudIcon Icon="@Icons.Filled.Edit" Style="vertical-align:middle;" Title="Edit" Class="mr-2" /><span style="vertical-align:middle;">Edit</span></MudMenuItem>
                        }
                    </MudMenu>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent Class="pt-0">
                <MudText Typo="Typo.h4">@_bulletin.Title</MudText>
                <Emoji>
                    <MudText Typo="Typo.body2" Class="mt-2" Style="overflow-wrap: break-word;">@_bulletin.Description</MudText>
                </Emoji>
                @if (_bulletin.Modified != null)
                {
                    <MudText Typo="Typo.body2" Class="mt-2"><strong>Last modified:</strong> @(((DateTime)_bulletin.Modified).ToString("dd.MM.yyyy"))</MudText>
                }
            </MudCardContent>
            @if (_bulletin.Images.Any())
            {
                <MudHidden Breakpoint="Breakpoint.Lg" Invert="false">
                    <MudCarousel @ref="_carousel" ItemsSource="@_bulletin.Images" Style="height:200px; width:100%" ShowArrows="true" ShowDelimiters="true" AutoCycle="false">
                        <ItemTemplate>
                            <div class="d-flex flex-column flex-column justify-center" @onclick="@(e=>OpenDialog(@context.GetPath()))">
                                <MudCardMedia Image=@context.GetPath() />
                            </div>
                        </ItemTemplate>
                    </MudCarousel>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Lg" Invert="true">
                    <MudGrid Class="px-4">
                        @foreach (var img in _bulletin.Images)
                        {
                            <MudItem xs="4">
                                <div class="d-flex flex-column flex-column justify-center" @onclick="@(e=>OpenDialog(img.GetPath()))">
                                    <MudCardMedia Image=@img.GetPath() />
                                </div>
                            </MudItem>
                        }
                    </MudGrid>
                </MudHidden>
            }
            @if (_bulletin.Expired != null && _bulletin.Expired < DateTime.UtcNow)
            {
                <MudOverlay Visible="true" LightBackground="true" Absolute="true">
                    <MudChip Color="Color.Error" Class="px-5 py-2 mx-2"><MudText Typo="Typo.h6">This bulletin has expired</MudText></MudChip>
                </MudOverlay>
            }
        </div>
        <MudCardActions Class="d-flex">
            <AuthorizeView>
                <Authorized>
                    <MudText Class="pl-3">@_bulletin.VotesCount</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color=@(_bulletin.UserVoted?Color.Secondary:Color.Default) OnClick=Vote Disabled=@(_bulletin.Expired != null &&_bulletin.Expired<DateTime.UtcNow) />
                    <MudText Class="pl-3">@_bulletin.CommentsCount</MudText>
                    <MudIconButton Icon="@Icons.Filled.Comment" Color="Color.Default" />
                    <MudIconButton Icon="@Icons.Filled.Bookmark" Color=@(_bulletin.UserBookmark?Color.Warning:Color.Default) OnClick=Bookmark Style="margin-left:auto" />
                </Authorized>
                <NotAuthorized>
                    <MudText Class="pl-3">@_bulletin.VotesCount</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" Disabled />
                    <MudText Class="pl-3">@_bulletin.CommentsCount</MudText>
                    <MudIconButton Icon="@Icons.Filled.Comment" Color="Color.Default" />
                    <MudIconButton Icon="@Icons.Filled.Bookmark" Color="Color.Default" Style="margin-left:auto" Disabled />
                </NotAuthorized>
            </AuthorizeView>
        </MudCardActions>
    </MudCard>*@
    <CardComponent Bulletin="_bulletin" BulletinRemovedCallback="RemoveBulletin"></CardComponent>

    <MudPaper Outlined="true" Class="py-5 mb-5">
        <AuthorizeView Context="authorizedView">
            <Authorized>

                <AddCommentComponent Bulletin="_bulletin" CommentUpdateCallback="UpdateComments"></AddCommentComponent>

            </Authorized>
            <NotAuthorized>

            </NotAuthorized>
        </AuthorizeView>
    </MudPaper>
    <MudText Typo="Typo.h4" Class="mb-2">Comments</MudText>
    @if (_comments != null && _comments.Any())
    {

        @foreach (var comment in _comments)
        {
            <CommentComponent Comment=comment></CommentComponent>
        }

    }
    else if (_commentState == State.LOADING)
    {
        <LoadingComponent></LoadingComponent>
    }
    else
    {
        <MudPaper Outlined="true" Class="py-5">
            <MudText Align="Align.Center">Sorry but there is no comments</MudText>
        </MudPaper>
    }
}
else if (_pageState == State.ACCESS_BLOCKED)
{
    <AccessBlockedComponent></AccessBlockedComponent>
}
else
{
    <LoadingComponent></LoadingComponent>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid GroupId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid BulletinId { get; set; }



    private Bulletin? _bulletin = default!;
    private IList<Comment> _comments = default!;
    private State _pageState = State.LOADING;
    private State _commentState = State.LOADING;

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        if (UserService.IsInGroup(new Group(GroupId)))
        {
            _bulletin = await BulletinService.GetBulletinInfoAsyncCached(UserService.User!, new Group(GroupId), new Bulletin(BulletinId));
            _comments = await CommentService.GetCommentsAsyncCached(new Bulletin(BulletinId));
            _commentState = _pageState = State.SUCCESS;
        }
        else
        {
            _commentState = _pageState = State.ACCESS_BLOCKED;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    protected async Task UpdateComments(bool update)
    {
        _comments = default!;
        _commentState = State.LOADING;
        StateHasChanged();
        _comments = await CommentService.GetCommentsAsyncCached(new Bulletin(BulletinId), true);
        _commentState = State.SUCCESS;
        _bulletin!.CommentsCount++;
        StateHasChanged();
    }

    private void OpenDialog(string path)
    {
        var parameters = new DialogParameters();
        parameters.Add("Path", path);
        DialogService.Show<ImageDialogComponent>("Image", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large });
    }

    protected async Task RemoveBulletin(Bulletin bulletin)
    {
        var result = await BulletinService.RemoveBulletin(bulletin);
        if (result)
        {
            Snackbar.Add($"Bulletin has been removed - redirecting", Severity.Success);
            await Task.Delay(2000);
            await JS.InvokeVoidAsync("history.back");
        }
        else
            Snackbar.Add($"There was an error removing bulletin - contact system admin", Severity.Error);
    }
}
