@using BulletinBoard.Services
@using BulletinBoard.Data
@using BulletinBoard.Model
@using BulletinBoard.DTOs
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components;

@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager

@if (_bulletins != null)
{
    <div class="grid" style="display: grid; grid-gap:10px;grid-template-columns: repeat(auto-fill, minmax(400px,1fr)); grid-auto-rows: 20px;">
        @foreach (var bulletin in _bulletins)
        {
            <div class="item">
                <div class="content">
                    <CardComponent Bulletin="bulletin"></CardComponent>
                </div>
            </div>
        }
    </div>

    <MudPagination BoundaryCount="1" MiddleCount="1" Count="22" @bind-Selected="@_page" />
}
else
{
    <MudElement Class="d-flex flex-column">
            <MudProgressCircular Color="Color.Primary" Style="height:200px;width:200px;" Class="mx-auto mt-15" Indeterminate="true" />
            <MudText Typo="Typo.h4"  Class="mx-auto mt-15">Loading bulletins</MudText>
    </MudElement>

}
@code {
    private IList<BulletinInfoDTO> _bulletins;
    private int _page = 1;
    protected User _user;
    [Inject]
    protected IBulletinService _bulletinService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _user = await UserManager.GetUserAsync(user);

        _bulletins = await _bulletinService.GetBulletinsInfoAsyncCached(1, 10, _user);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("resizeAllGridItems");
    }

}
