@using BulletinBoard.Model
@using System.IO
@inject IWebHostEnvironment env
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" Align="Align.Center"><b>Add</b> new bulletin</MudText>
<EditForm Model="@_bulletin" OnValidSubmit="ValidFormSubmitted">
    <MudElement Class="d-flex justify-space-around py-2 px-1 mt-6" Style="text-align:center">
        <MudPaper Class="pa-2 mx-1 mud-theme-primary" MinWidth=7rem>Bulletin</MudPaper>
        <MudPaper Class="pa-2 mx-1 mud-theme-primary" MinWidth=7rem>Attachments</MudPaper>
        <MudPaper Class="pa-2 mx-1 mud-theme-primary" MinWidth=7rem>Location</MudPaper>
    </MudElement>

    <MudProgressLinear Color="Color.Success" Buffer="true" Value=@_stepValue BufferValue=@_stepBuffer Class="my-5" />

    @* Bulletin step *@
    <MudPaper hidden=@(_step!=1) Style="min-height:30rem" Elevation="3">
        <MudGrid>
            <MudItem xs="12" sm="12" md="12" Class="mx-8 mt-4">
                <MudTextField T="string" Label="Title" Variant="Variant.Filled" For="@(() => _bulletin.Title)" />
            </MudItem>
            <MudItem xs="12" sm="12" md="12" Class="mx-8">
                <MudTextField T="string" Label="Description" Lines="13" Variant="Variant.Filled" For="@(() => _bulletin.Description)" />
            </MudItem>
        </MudGrid>
    </MudPaper>

    @* Attachment step *@
    <MudPaper Class="p-4" hidden=@(_step!=2) Style="min-height:30rem" Elevation="3">
            <MudGrid Class="my-1 mx-1" Style="text-align:-webkit-center">
                @foreach (var img in _file)
                {
                    <MudItem lg="3" xl="4" xs="12" md="6">
                        <MudCard Style="width:200px">
                            <MudCardMedia Image="@img.Item2" Height="200" />
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="()=>RemoveImg(img.Item1)">Delete</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>

                }
            </MudGrid>

        <MudElement Class="d-flex justify-center mt-3">
            <InputFile OnChange="@LoadFiles" multiple
                       accept=".jpg, .jpeg, .png"
                       CustomExtensionMessage="Only .jpg .jpeg and .png files are allowed."
                       MaxFileSize=@_uploadLimit
                       FileTooLargeMessage="File is too large"
                       hidden
                       id="imgInput" />
            <MudFab Class="mb-4"
                    HtmlTag="label"
                    Color="Color.Secondary"
                    Icon="@Icons.Filled.Image"
                    Label="Load picture"
                    for="imgInput" />
        </MudElement>
    </MudPaper>

    @* Location step *@
    <MudPaper Class="p-4" hidden=@(_step!=3) Style="min-height:30rem" Elevation="3">
        <div class="mb-3">
            <div class="form-group">
                <label for="title">Title</label>
                <InputText id="title" class="form-control" @bind-Value="_bulletin.Title"></InputText>
                <small class="form-text text-danger">Please enter a correct email address.</small>
            </div>
        </div>
        <div class="mb-3">
            <div class="form-group">
                <label for="title">Description</label>
                <InputTextArea id="title" class="form-control" @bind-Value="_bulletin.Description" rows="5"></InputTextArea>
            </div>
        </div>
    </MudPaper>


    <MudElement Class="d-flex justify-space-between">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled=@(_step==1) OnClick=PreviousStep StartIcon="@Icons.Filled.ArrowBack" Class="mt-3">Previous step</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick=NextStep Style=@(_step==3?"display:none":"") Class="mt-3" EndIcon="@Icons.Filled.ArrowForward">Next step</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick=Submit Style=@(_step!=3?"display:none":"") Class="mt-3" EndIcon="@Icons.Filled.Save">Submit</MudButton>
    </MudElement>
</EditForm>

@code {
    [Parameter]
    public Guid GroupId { get; set; } = Guid.Empty;
    // Form
    private Bulletin _bulletin = new();

    uint _uploadLimit = 5;
    uint _maxFileSize = 5 * 1000000;
    uint _step { get; set; } = 1;
    uint _stepValue { get; set; } = 0;
    uint _stepBuffer { get; set; } = 33;

    List<Tuple<IBrowserFile, string>> _file = new();

    protected override void OnInitialized()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    private void ValidFormSubmitted()
    {

    }

    private void NextStep()
    {
        _step++;
        _stepValue = (_step - 1) * 33 == 99 ? 100 : (_step - 1) * 33;
        _stepBuffer = _step * 33 == 99 ? 100 : _step * 33;

    }
    private void PreviousStep()
    {
        _step--;
        _stepValue = (_step - 1) * 33 == 99 ? 100 : (_step - 1) * 33;
        _stepBuffer = _step * 33 == 99 ? 100 : _step * 33;
    }


    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        _file.Clear();
        List<string> acceptedFormat = new() { "image/jpeg", "image/png", "image/jpg" };

        foreach (var file in e.GetMultipleFiles(5))
        {
            if (!acceptedFormat.Contains(file.ContentType))
            {
                Snackbar.Add($"File {file.Name} has wrong format only (.jpg, .jpeg, .png)", Severity.Error);
                continue;
            }
            if (file.Size >= _maxFileSize)
            {
                Snackbar.Add($"File {file.Name} is too large {Math.Round((float)file.Size / 1000000, 2)}MB, max size is {_maxFileSize / 1000000}MB", Severity.Warning);
                continue;
            }
            else
            {
                var resizedImageFile = await file.RequestImageFileAsync("image/jpeg", 250, 250);
                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);

                _file.Add(new(file, $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}"));
            }

        }
    }

    void RemoveImg(IBrowserFile img)
    {
        _file.RemoveAll(i => i.Item1 == img);
    }

    private async Task Submit()
    {
        foreach (var img in _file)
        {
            Stream stream = img.Item1.OpenReadStream(_maxFileSize);
            var path = $"{env.WebRootPath}\\{img.Item1.Name}";
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
        }
    }

}
