@page "/bulletin/edit"

@attribute [Authorize]

@using BulletinBoard.Extensions
@using BulletinBoard.Model
@using System.IO
@using Microsoft.AspNetCore.Identity;
@using BulletinBoard.Services
@using System.Linq;

@inject ISnackbar Snackbar
@inject IWebHostEnvironment env
@inject IUserService UserService
@inject IBulletinService BulletinService
@inject NavigationManager NavigationManager


@if (Bulletin != null && Bulletin.Group != null && UserService.CanEditBulletin(Bulletin.Group, Bulletin))
{
<MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4"><b>Edit</b> bulletin</MudText>
    <MudPaper Class="mud-width-full py-8" Elevation="1">
        <EditForm Model="@Bulletin" OnValidSubmit="ValidFormSubmitted">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" md="12" Class="px-8">
                    <MudText Typo="Typo.h5">Bulletin</MudText>
                    <MudTextField Label="Title" HelperText="Title of your bulletin" Variant="Variant.Outlined" @bind-Value="Bulletin.Title" For="@(() => Bulletin.Title)" />
                    <MudTextField T="string" Label="Description" HelperText="Content of your bulletin (Github Emoji are supported)" Lines="13" Variant="Variant.Outlined" @bind-Value="Bulletin.Description" For="@(() => Bulletin.Description)" />
                </MudItem>
                <MudItem xs="12" md="8" Class="d-flex px-8">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h5">Attachments</MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid>
                                @foreach (var img in _files)
                                {
                                    <MudItem xs="6" md="6">
                                        <MudCard>
                                            <MudCardMedia Image=@img.Item2 Height="200" />
                                            <MudCardActions Class="d-flex justify-space-between">
                                                <MudText Typo="Typo.caption">@img.Item1.Name</MudText>
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteNewFile(img.Item1))"></MudIconButton >
                                            </MudCardActions>
                                        </MudCard>
                                    </MudItem>

                                }
                                @foreach (var img in Bulletin.Images)
                                {
                                    <MudItem xs="6" md="6">
                                        <MudCard>
                                            <MudCardMedia Image=@img.GetBulletinImagePath(Bulletin.Group.Id,Bulletin.Id) Height="200" />
                                            <MudCardActions Class="d-flex justify-space-between">
                                                <MudText Typo="Typo.caption">@img.OrginalName</MudText>
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteExistingFile(img))"></MudIconButton >
                                            </MudCardActions>
                                        </MudCard>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12" Class="d-flex flex-column">
                                <MudButton Class="mx-auto" Variant="Variant.Filled" HtmlTag="label" Color="Color.Secondary" Icon="@Icons.Filled.Image" for="imgInput">Load pictures</MudButton>
                                <InputFile OnChange="@LoadFiles" multiple accept=".jpg, .jpeg, .png" CustomExtensionMessage="Only .jpg .jpeg and .png files are allowed." MaxFileSize=@_uploadLimit FileTooLargeMessage="File is too large" hidden id="imgInput" />

                                <MudText Class="mt-2" Align=Align.Center>Max 5 images, 5MB each.</MudText>
                        </MudItem>

                    </MudGrid>
                </MudItem>

                <MudItem xs="12" md="4" Class="px-8">
                    <MudText Typo="Typo.h5">Additional</MudText>
                    <MudDatePicker Label="Bulletin expire date" HelperText="Date after witch bulletin will be marked as expired (optional)" Variant="Variant.Outlined" @bind-Date="Bulletin.Expired" For="@(() => Bulletin.Expired)" ReadOnly="false" />
                    <MudSelect T="Guid?" Label="Group" Disabled=true Variant="Variant.Outlined" HelperText="You can't change bulletin group" @bind-value="Bulletin.GroupId">
                        <MudSelectItem T="Guid?" Value="@Bulletin.GroupId">@Bulletin.Group!.Name</MudSelectItem>
                    </MudSelect>
                </MudItem>

            </MudGrid>
            <MudElement Class="d-flex justify-end mr-6">
                <MudButton Variant="Variant.Filled" Color="Color.Success" ButtonType="ButtonType.Submit" Class="mt-3" EndIcon="@Icons.Filled.Save">Submit</MudButton>
            </MudElement>
        </EditForm>
        <MudOverlay Visible="_blocked" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true" />
        </MudOverlay>
    </MudPaper>
}
else if(_pageState == State.LOADING)
{
    <LoadingComponent></LoadingComponent>
}
else
{
    <AccessBlockedComponent></AccessBlockedComponent>
}


@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid BulletinId { get; set; }

    public Bulletin? Bulletin { get; set; } = new();

    // Bulletin default values
    private uint _uploadLimit = 5;
    private uint _maxFileSize = 5 * 1000000;

    // Bulletin attachments
    private List<Tuple<IBrowserFile, string>> _files = new();
    private List<Image> _deletedImages = new();
    private List<Image> _newImages = new();
    private bool _blocked = false;
    private State _pageState = State.LOADING;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Bulletin = await BulletinService.GetBulletinInfoAsync(null, new Bulletin(BulletinId))!;
        _pageState = State.SUCCESS;
        StateHasChanged();
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        _files.Clear();
        List<string> acceptedFormat = new() { "image/jpeg", "image/png", "image/jpg" };

        var maxImages = Convert.ToInt32(_uploadLimit - _deletedImages.Count());
        foreach (var file in e.GetMultipleFiles(maxImages))
        {
            if (!acceptedFormat.Contains(file.ContentType))
            {
                Snackbar.Add($"File {file.Name} has wrong format only (.jpg, .jpeg, .png)", Severity.Error);
                continue;
            }
            if (file.Size >= _maxFileSize)
            {
                Snackbar.Add($"File {file.Name} is too large {Math.Round((float)file.Size / 1000000, 2)}MB, max size is {_maxFileSize / 1000000}MB", Severity.Warning);
                continue;
            }
            else
            {
                var format = file.Name.Split('.').Last();
                var resizedImageFile = await file.RequestImageFileAsync($"image/jpeg", 300, 300);
                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);
                _files.Add(new(file, $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}"));
            }
        }
    }

    private void DeleteNewFile(IBrowserFile file)
    {
        if (_files.Any())
        {
            _files.RemoveAll(i => i.Item1 == file);
        }
    }

    private void DeleteExistingFile(Image img)
    {
        _deletedImages.Add(img);
        Bulletin!.Images.Remove(img);
        StateHasChanged();
    }

    private async Task ValidFormSubmitted(EditContext editContext)
    {
        _blocked = true;
        // Set bulletin data
        Bulletin!.Modified = DateTime.UtcNow;

        // Create image entity and add it to bulletin
        foreach (var file in _files)
        {
            var img = new Image().SetExtension(file.Item1.Name);
            img.OrginalName = file.Item1.Name;
            Bulletin.Images.Add(img);
            _newImages.Add(img);
        }
        foreach(var img in _deletedImages)
        {
            Bulletin.Images.Remove(img);
        }

        // Try save bulletin in db
        foreach (var img in Bulletin.Images) img.BulletinId = Bulletin.Id;
        var result = await BulletinService.UpdateBulletin(Bulletin);
        if (!result)
        {
            _blocked = false;
            Snackbar.Add($"Bulletin has NOT been updated, contact system administrator", Severity.Error);
            return;
        }
        // If bulletin succesfuly added save images on server
        foreach (var file in _files.Select((image, index) => (image, index)))
        {
            Stream stream = file.image.Item1.OpenReadStream(_maxFileSize);

            var folder = $"{env.WebRootPath}";
            if (!Directory.Exists(folder += $"/{Consts.DefaultBulletinFolder}")) Directory.CreateDirectory(folder);
            if (!Directory.Exists(folder += $"/{Bulletin.GroupId}")) Directory.CreateDirectory(folder);
            if (!Directory.Exists(folder += $"/{Bulletin.Id}")) Directory.CreateDirectory(folder);

            FileStream fs = File.Create($"{folder}/{_newImages[file.index].GetFullName()}");
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
        }
        Snackbar.Add($"Bulletin has been modified - redirecting", Severity.Success);
        await Task.Delay(2000);
        NavigationManager.NavigateTo($"bulletin?groupid={Bulletin.GroupId}&bulletinid={Bulletin.Id}");
    }
}
