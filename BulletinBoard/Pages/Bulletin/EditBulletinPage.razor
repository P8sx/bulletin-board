@page "/bulletin/edit"

@attribute [Authorize(Roles ="User, Moderator, Admin")]

@using static Services.GlobalService
@using BulletinBoard.Model
@using BulletinBoard.Pages.Shared.Components
@using System.Linq;
@using GEmojiSharp.Blazor

@inject ISnackbar _snackbar
@inject IWebHostEnvironment _env
@inject IBulletinService _bulletinService
@inject NavigationManager _navigationManager


@if (Bulletin is {Board: { } } && _userService.IsBulletinOwner(Bulletin))
{
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4"><b>Edit</b> bulletin</MudText>
    <MudPaper Class="mud-width-full py-8" Elevation="1">
        <EditForm Model="@Bulletin" OnValidSubmit="ValidFormSubmitted">
            <DataAnnotationsValidator />
            <MudGrid>
              <MudItem xs="12" md="12" Class="px-8 d-flex flex-column">
                  <MudText Typo="Typo.h5">Bulletin @(_preview ? "(preview)" : "")</MudText>
                  @if (_preview)
                  {
                      <MudPaper Class="px-2 mt-2 mb-3" Outlined="true">
                          <Emoji>
                              <MudText Typo="Typo.body2" Class="mt-2" Style="overflow-wrap: break-word;">
                                  <MudMarkdown OverrideHeaderTypo="delegate(Typo arg) { return arg is Typo.h1 or Typo.h2 ? Typo.h3 : arg; }" Value="@Bulletin.Description"></MudMarkdown>
                              </MudText>
                          </Emoji>
                      </MudPaper>
                  }
                  else
                  {
                      <MudTextField Label="Title" HelperText="Title of your bulletin" Variant="Variant.Outlined" @bind-Value="Bulletin.Title" For="@(() => Bulletin.Title)"/>
                      <MudTextField T="string" Label="Description" HelperText="Content of your bulletin (Markdown and Github Emoji are supported)" Lines="13" Variant="Variant.Outlined" @bind-Value="Bulletin.Description" For="@(() => Bulletin.Description)"/>
                  }
                  <MudButton Class="ms-auto" Variant="Variant.Filled" OnClick="() => { _preview = !_preview; }" Color="@(_preview ? Color.Primary : Color.Secondary)">@(_preview ? "Text" : "Preview")</MudButton>
              </MudItem>
                <MudItem xs="12" md="8" Class="d-flex px-8">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h5">Attachments</MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid>
                                @foreach (var img in _imageUpload!.Images)
                                {
                                    <MudItem xs="6" md="6">
                                        <MudCard>
                                            <MudCardMedia Image=@img.base64Image Height="200" />
                                            <MudCardActions Class="d-flex justify-space-between">
                                                <MudText Typo="Typo.caption">@img.browserFile.Name</MudText>
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => _imageUpload.RemoveImage(img))"></MudIconButton>
                                            </MudCardActions>
                                        </MudCard>
                                    </MudItem>
                                }
                                @foreach (var img in Bulletin.Images)
                                {
                                    <MudItem xs="6" md="6">
                                        <MudCard>
                                            <MudCardMedia Image=@_globalService.BulletinImage(img) Height="200" />
                                            <MudCardActions Class="d-flex justify-space-between">
                                                <MudText Typo="Typo.caption">@img.Name</MudText>
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteExistingFile(img))"></MudIconButton>
                                            </MudCardActions>
                                        </MudCard>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12" Class="d-flex flex-column">
                            <ImageUploadComponent @ref="_imageUpload" ImageUpdateCallback="UpdateImages"></ImageUploadComponent>
                            <MudText Class="mt-2" Align=Align.Center>Max @(_globalService.MaxFileSize/1024/1024) MB per image.</MudText>
                        </MudItem>

                    </MudGrid>
                </MudItem>

                <MudItem xs="12" md="4" Class="px-8">
                    <MudText Typo="Typo.h5">Additional</MudText>
                    <MudDatePicker Label="Bulletin expire date" HelperText="Date after witch bulletin will be marked as expired (optional)" Variant="Variant.Outlined" @bind-Date="Bulletin.Expired" For="@(() => Bulletin.Expired)" ReadOnly="false" />
                    <MudSelect T="ulong?" Label="Board" Disabled=true Variant="Variant.Outlined" HelperText="You can't change bulletin board" @bind-value="Bulletin.BoardId">
                        <MudSelectItem T="ulong?" Value="@Bulletin.BoardId">@Bulletin.Board!.Name</MudSelectItem>
                    </MudSelect>
                </MudItem>

            </MudGrid>
            <MudElement Class="d-flex justify-end mr-6">
                <MudButton Disabled="_processing" Variant="Variant.Filled" Color="Color.Success" ButtonType="ButtonType.Submit" Class="mt-3" EndIcon="@Icons.Filled.Save">
                <ProcessingButtonComponent Processing="_processing">Submit</ProcessingButtonComponent>
            </MudButton>
            </MudElement>
        </EditForm>
    </MudPaper>
}
else if (_pageState == State.Loading)
{
    <LoadingComponent></LoadingComponent>
}
else
{
    <AccessBlockedComponent></AccessBlockedComponent>
}


@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid BulletinGuid { get; set; }

    private Bulletin? Bulletin { get; set; } = new();

    // Bulletin attachments

    private readonly List<Image> _deletedImages = new();

    private bool _processing;
    private bool _preview = false;
    private State _pageState;

    private ImageUploadComponent? _imageUpload;

    public EditBulletinPage()
    {
        _pageState = State.Loading;
    }

    private async Task UpdateImages(bool update) => await InvokeAsync(StateHasChanged);


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Bulletin = await _bulletinService.GetBulletinAsync(null, new Bulletin(BulletinGuid));
        _pageState = State.Success;
        StateHasChanged();
    }

    private void DeleteExistingFile(Image img)
    {
        _deletedImages.Add(img);
        Bulletin!.Images.Remove(img);
        StateHasChanged();
    }

    private async Task ValidFormSubmitted(EditContext editContext)
    {
        _processing = true;
        // Set bulletin data
        Bulletin!.Modified = DateTime.UtcNow;

        foreach (var img in _deletedImages)
        {
            Bulletin.Images.Remove(img);
        }

        // Try save bulletin in db
        var uploadedImages = _imageUpload!.GetImages().ToList();
        Bulletin.Images.AddRange(uploadedImages);
        

        var result = await _bulletinService.UpdateBulletinAsync(Bulletin);

        if (!result)
        {
            _processing = false;
            _snackbar.Add($"Bulletin has NOT been updated, contact system administrator", Severity.Error);
            return;
        }
        // If bulletin successfully added save images on server
        await _imageUpload.SaveFilesAsync();
        _snackbar.Add($"Bulletin has been modified - redirecting", Severity.Success);
        await Task.Delay(2000);
        _navigationManager.NavigateTo($"bulletin?boardGuid={Bulletin.Board!.Guid}&bulletinGuid={Bulletin.Guid}");
    }
}
