@using BulletinBoard.Model
@using BulletinBoard.Pages.Shared.Components
@using BulletinBoard.Pages.Violation
@using BulletinBoard.Services
@using GEmojiSharp.Blazor
@using static Services.GlobalService

@implements IDisposable

@inject IDialogService _dialogService


<MudCard Outlined="true" Class="mb-5">
    <div style="position: relative;">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Image="@(_globalService.AvatarImage(Bulletin.User!.Image))"></MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">
                    <b>@Bulletin.User!.UserName</b>
                </MudText>
                <MudText Typo="Typo.body2">
                    @switch ((DateTime.Now - Bulletin.Created).TotalMinutes)
                    {
                        case < 60:
                            @Convert.ToInt32(((DateTime.Now - Bulletin.Created).TotalMinutes))@: minutes ago
                            break;
                        case < 10 * 60:
                            @Convert.ToInt32(((DateTime.Now - Bulletin.Created).TotalHours))@: hour ago
                            break;
                        case < 24 * 60:
                            @Convert.ToInt32(((DateTime.Now - Bulletin.Created).TotalHours))@: hours ago
                            break;
                        case > 24 * 60 and < 24 * 7 * 60:
                            @Convert.ToInt32(((DateTime.Now - Bulletin.Created).TotalDays))@: days ago
                            break;
                        default:
                            @(Bulletin.Created.ToString("dd.MM.yyyy"))
                            break;
                    }

                </MudText>
                @if (Bulletin.Expired != null)
                {
                    <MudText Typo="Typo.body2">
                        <strong>Expiring:</strong> @(((DateTime) Bulletin.Expired).ToString("dd.MM.yyyy"))
                    </MudText>
                }
                @if (BoardInfo)
                {
                    <MudText Typo="Typo.body2" Style="overflow-wrap: break-word;">
                        <strong>Post from board:</strong> @Bulletin.Board!.Name
                    </MudText>
                }
            </CardHeaderContent>
            <CardHeaderActions>
                @if (Bulletin.Pinned)
                {
                    <MudChip Class="mb-5" Icon="@Icons.Material.Filled.PushPin" Color="Color.Primary" IconColor="Color.Default">Pinned</MudChip>
                }
                <MudMenu Class="mt-2" Icon="@Icons.Material.Filled.Settings" Color="Color.Default" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.TopRight">
                    <MudMenuItem OnClick="@(() => Report(Bulletin))">
                        <MudIcon Icon="@Icons.Filled.Report" Color="Color.Error" Style="vertical-align:middle;" Title="Edit" Class="mr-2"/><span style="vertical-align:middle;">Report</span>
                    </MudMenuItem>
                    @if (_userService.IsBoardModerator(new Board() {Guid = Bulletin.Board!.Guid}) || _userService.IsBulletinOwner(Bulletin))
                    {
                        <MudMenuItem OnClick=@(async () => await BulletinRemovedCallback.InvokeAsync(Bulletin))>
                            <MudIcon Icon="@Icons.Filled.Delete" Style="vertical-align:middle;" Title="Delete" Class="mr-2"/><span style="vertical-align:middle;">Delete</span>
                        </MudMenuItem>
                    }
                    @if (_userService.IsBoardModerator(new Board() {Guid = Bulletin.Board!.Guid}))
                    {
                        <MudMenuItem OnClick=@(async () => await BulletinPinnedCallback.InvokeAsync(Bulletin))>
                            <MudIcon Icon="@Icons.Filled.PushPin" Style="vertical-align:middle;" Title="Pin" Class="mr-2"/><span style="vertical-align:middle;">Pin</span>
                        </MudMenuItem>
                    }
                    @if (_userService.IsBulletinOwner(Bulletin))
                    {
                        <MudMenuItem Link=@($"bulletin/edit?&bulletinGuid={Bulletin.Guid}")>
                            <MudIcon Icon="@Icons.Filled.Edit" Style="vertical-align:middle;" Title="Edit" Class="mr-2"/><span style="vertical-align:middle;">Edit</span>
                        </MudMenuItem>
                    }
                </MudMenu>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent Class="pt-0">
            @if (Bulletin.Title != "")
            {
                <MudText Typo="Typo.h4">@Bulletin.Title</MudText>
            }
            <Emoji>
                <MudText Typo="Typo.body2" Class="mt-2" Style="overflow-wrap: break-word;">
                    <MudMarkdown OverrideHeaderTypo="delegate(Typo arg) { return arg is Typo.h1 or Typo.h2 ? Typo.h3 : arg; }" Value="@Bulletin.Description"></MudMarkdown>
                </MudText>
            </Emoji>

            @if (Bulletin.Modified != null)
            {
                <MudText Typo="Typo.body2" Class="mt-2">
                    <strong>Last modified:</strong> @(((DateTime) Bulletin.Modified).ToString("dd.MM.yyyy"))
                </MudText>
            }
        </MudCardContent>
        @if (Bulletin.Images.Any())
        {
            <MudHidden Breakpoint="Breakpoint.Md" Invert="false">
                <MudCarousel @ref="_carousel" ItemsSource="@Bulletin.Images" Style="height:200px; width:100%" ShowArrows="true" ShowDelimiters="true" AutoCycle="false">
                    <ItemTemplate>
                        <div class="d-flex flex-column flex-column justify-center" @onclick="@(_ => OpenDialog(@context))">
                            <MudCardMedia Image=@_globalService.BulletinImage(context)></MudCardMedia>
                        </div>
                    </ItemTemplate>
                </MudCarousel>
            </MudHidden>

            <MudHidden Breakpoint="Breakpoint.Md" Invert="true">
                <MudGrid Class="px-4">
                    @foreach (var img in Bulletin.Images)
                    {
                        <MudItem xs="4">
                            <div class="d-flex flex-column flex-column justify-center" @onclick="@(_ => OpenDialog(img))">
                                <MudCardMedia Image=@_globalService.BulletinImage(img)></MudCardMedia>
                            </div>
                        </MudItem>
                    }
                </MudGrid>
            </MudHidden>
        }
        @if (Bulletin.Expired != null && Bulletin.Expired < DateTime.UtcNow)
        {
            <MudOverlay Visible="true" LightBackground="true" Absolute="true">
                <MudChip Color="Color.Error" Class="px-5 py-2 mx-2">
                    <MudText Typo="Typo.h6">This bulletin has expired</MudText>
                </MudChip>
            </MudOverlay>
        }
    </div>
    <MudCardActions Class="d-flex">
        <AuthorizeView Roles="Admin, User, Moderator">
            <Authorized>
                <MudText Class="pl-3">@Bulletin.VotesCount</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color=@(Bulletin.UserVoted ? Color.Secondary : Color.Default) OnClick="Vote" Disabled="@(Bulletin.Expired != null && Bulletin.Expired < DateTime.UtcNow)"></MudIconButton>
                <MudText Class="pl-3">@Bulletin.CommentsCount</MudText>
                <MudIconButton Icon="@Icons.Filled.Comment" Color="Color.Default"/>
                <MudIconButton Icon="@Icons.Filled.Bookmark" Color=@(Bulletin.UserBookmark ? Color.Warning : Color.Default) OnClick="Bookmark" Style="margin-left:auto"></MudIconButton>
                <MudIconButton Link=@($"bulletin?boardGuid={Bulletin.Board!.Guid}&bulletinGuid={Bulletin.Guid}") Icon="@Icons.Filled.ReadMore" Color="Color.Default"/>
            </Authorized>
            <NotAuthorized>
                <MudText Class="pl-3">@Bulletin.VotesCount</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" Disabled/>
                <MudText Class="pl-3">@Bulletin.CommentsCount</MudText>
                <MudIconButton Icon="@Icons.Filled.Comment" Color="Color.Default" Disabled />
                <MudIconButton Icon="@Icons.Filled.Bookmark" Color="Color.Default" Style="margin-left:auto" Disabled/>
                <MudIconButton Icon="@Icons.Filled.ReadMore" Color="Color.Default" Disabled/>
            </NotAuthorized>
        </AuthorizeView>
        

    </MudCardActions>
</MudCard>


@code {

    [Parameter]
    public Bulletin Bulletin { get; set; } = new();

    [Parameter]
    public bool BoardInfo { get; set; }

    [Parameter]
    public EventCallback<Bulletin> BulletinRemovedCallback { get; set; }
    
    [Parameter]
    public EventCallback<Bulletin> BulletinPinnedCallback { get; set; }
    
    private MudCarousel<Image>? _carousel;

    private void Vote()
    {
        Bulletin.VotesCount = Bulletin.UserVoted ? Bulletin.VotesCount - 1 : Bulletin.VotesCount + 1;
        Bulletin.UserVoted = !Bulletin.UserVoted;
        _userService.Vote(Bulletin);
    }

    private void Bookmark()
    {
        Bulletin.UserBookmark = !Bulletin.UserBookmark;
        _userService.Bookmark(Bulletin);
    }

    public void Dispose()
    {
    }

    private void OpenDialog(Image image)
    {
        var parameters = new DialogParameters {{"Path", _globalService.BulletinImage(image)}};
        _dialogService.Show<ImageDialogComponent>($"Image - {image.Name}", parameters, new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Large});
    }
    
    private void Report(Bulletin bulletin)
    {
        var parameters = new DialogParameters {{"Bulletin", bulletin}};
        _dialogService.Show<ViolationDialogComponent>($"Report bulletin",parameters, new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Large});
    }

}