@page "/bulletin/mybulletins"

@attribute [Authorize]
@using BulletinBoard.Pages.Bulletins
@using BulletinBoard.Services
@using BulletinBoard.Data
@using BulletinBoard.Model
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components;
@using BulletinBoard.Extensions;

@inject IUserService UserService
@inject IGroupService GroupService
@inject IBulletinService BulletinService
@inject NavigationManager NavigationManager

@if (_pageState == State.SUCCESS && _bulletins != null)
{

    <MudCard Outlined="true" Class="mb-3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4">Your bulletin</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.body2">These are all your newsletters that you have published</MudText>
        </MudCardContent>
    </MudCard>



    <MudElement Class="d-flex mb-4 justify-end ">
        <MudElement>
            <MudSelect Label="Order" @bind-Value="_orderBy" T="OrderBy" Variant="Variant.Outlined" Style="max-width:280px" SelectedValuesChanged="@(() => UpdateBulletins())">
                @foreach (OrderBy orderByItem in Enum.GetValues(typeof(OrderBy)))
                {
                    <MudSelectItem Value="@orderByItem">@orderByItem</MudSelectItem>
                }
            </MudSelect>
        </MudElement>
        <MudElement>
            <MudSelect Label="Sort" @bind-Value="_sortBy" T="SortBy" Variant="Variant.Outlined" Style="width:130px" Class="ml-2" SelectedValuesChanged="@(() => UpdateBulletins())">
                @foreach (SortBy sortByItem in Enum.GetValues(typeof(SortBy)))
                {
                    <MudSelectItem Value="@sortByItem">@sortByItem</MudSelectItem>
                }
            </MudSelect>
        </MudElement>
        <MudElement>
            <MudSelect T="int" Label="Show" @bind-Value="_bulletinsPerPage" Variant="Variant.Outlined" Style="max-width:80px" Class="ml-2">
                <MudSelectItem T="int" Value="10" />
                <MudSelectItem T="int" Value="30" />
                <MudSelectItem T="int" Value="60" />
            </MudSelect>
        </MudElement>
    </MudElement>



    <MudElement>
        @foreach (var bulletin in _bulletins)
        {
            <CardComponent Bulletin="bulletin" GroupInfo=true></CardComponent>
        }
    </MudElement>

    <MudElement Class="d-flex justify-center">
        <MudPagination Size="Size.Large" BoundaryCount="2" MiddleCount="3" Count="NumberOfPages()" SelectedChanged="PageChanged" />
    </MudElement>

}
else
{
    <LoadingComponent></LoadingComponent>
}
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; } = 1;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? SortBy { get; set; } = 0;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? OrderBy { get; set; } = 0;



    private int _bulletinsPerPage = 10;
    private int _bulletinsCount = 0;

    private State _pageState = State.LOADING;
    private IList<Bulletin> _bulletins = default!;
    private SortBy _sortBy = Services.SortBy.Created;
    private OrderBy _orderBy = Services.OrderBy.Ascending;

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        Page = Page ?? 1;
        
        _sortBy = (SortBy)((SortBy??1)%4);
        _orderBy = (OrderBy)((OrderBy??1)%2);    
        _bulletins = await GetBulletins();
        _bulletinsCount = await GetBulletinsCount();
        _pageState = State.SUCCESS;
        
        StateHasChanged();
    }

    protected void PageChanged(int page)
    {
        NavigationManager.NavigateTo($"/bulletin/mybulletins?page={page}");
    }

    protected async Task<IList<Bulletin>> GetBulletins()
    {
        return await BulletinService.GetUserBulletinsAsyncCached(Page ?? 1, _bulletinsPerPage >= 30 ? 30 : _bulletinsPerPage, UserService.User!, new BulletinSort(_sortBy, _orderBy));
    }
    protected async Task<int> GetBulletinsCount()
    {
        return await BulletinService.GetUserBulletinsCountAsyncCached(UserService.User!);
    }

    protected async Task UpdateBulletins()
    {
        _bulletins = await GetBulletins();
        _bulletinsCount = await GetBulletinsCount();
        StateHasChanged();
    }

    private int NumberOfPages()
    {
        if (_bulletinsCount == 0) return 0;
        return Convert.ToInt32(Math.Ceiling(Convert.ToDouble(_bulletinsCount) / Convert.ToDouble(_bulletinsPerPage)));
    }
}
