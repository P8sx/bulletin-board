@page "/users"
@using BulletinBoard.Model
@using Microsoft.AspNetCore.Identity
@using System.Linq
@inject IHelperService _helperService
@inject UserManager<User> _userManager
<MudCard Outlined="true" Class="mb-3">
    <MudCardHeader Class="pb-3">
        <CardHeaderContent>
            <MudText Typo="Typo.h4">Admin panel</MudText>
        </CardHeaderContent>
    </MudCardHeader>
</MudCard>
<MudTable ServerData="@(new Func<TableState, Task<TableData<User>>>(ServerReload))"
          Hover="true" @ref="_table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="id_field" T="User">Id</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="username_field" T="User">User Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="joined_field" T="User">Joined</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="email_field" T="User">Email</MudTableSortLabel>
        </MudTh>
        <MudTh>Role</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="UserName">@context.UserName</MudTd>
        <MudTd DataLabel="Joined">@context.Joined</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd>
            <MudSelect Style="max-width: 200px" 
                       Class="mt-0" T="string"
                       Variant="Variant.Outlined" 
                       AnchorOrigin="Origin.BottomCenter" 
                       Value="@context.RolesName.First()"
                       SelectedValuesChanged="@((IEnumerable<string> newRoles)=>RoleChanged(@context, newRoles))">
                <MudSelectItem T="string" Value="@("User")">User</MudSelectItem>
                <MudSelectItem T="string" Value="@("Moderator")">Moderator</MudSelectItem>
                <MudSelectItem T="string" Value="@("Admin")">Admin</MudSelectItem>
            </MudSelect>
        </MudTd>
        <MudTh><MudButton OnClick="@(()=>RemoveUser(context))" Variant="Variant.Filled" Color="Color.Error">Remove</MudButton></MudTh>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>a
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<User> _pagedData = null!;
    private MudTable<User> _table = null!;

    private int _totalItems;
    private string _searchString = "";

    private async Task<TableData<User>> ServerReload(TableState state)
    {
        IEnumerable<User> data = await _helperService.GetUsers();
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;
            if (element.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Id} {element.UserName} {element.Email}".Contains(_searchString))
                return true;
            return false;
        }).ToArray();
        _totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "username_field":
                data = data.OrderByDirection(state.SortDirection, o => o.UserName);
                break;
            case "joined_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Joined);
                break;
            case "email_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Email);
                break;
        }

        _pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<User>() {TotalItems = _totalItems, Items = _pagedData};
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table.ReloadServerData();
    }

    private async Task RoleChanged(User user, IEnumerable<string> newRoles)
    {
        var roles = newRoles.ToList();
        var umUser = await _userManager.FindByIdAsync(user.Id.ToString());
        await _userManager.RemoveFromRoleAsync(umUser, user.RolesName.First());
        await _userManager.AddToRoleAsync(umUser, roles.First());
        _snackbar.Add($"User role has been added", Severity.Success);
    }

    private async Task RemoveUser(User user)
    {
        await _helperService.RemoveUser(user);
    }

}