@page "/users"
@using BulletinBoard.Model
@inject IHelperService _helperService
 <MudTable ServerData="@(new Func<TableState, Task<TableData<User>>>(ServerReload))"
           Hover="true" @ref="_table">
     <ToolBarContent>
         <MudText Typo="Typo.h6">Periodic Users</MudText>
         <MudSpacer />
         <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                       AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
     </ToolBarContent>
     <HeaderContent>
         <MudTh><MudTableSortLabel SortLabel="id_field" T="User">Id</MudTableSortLabel></MudTh>
         <MudTh><MudTableSortLabel SortLabel="username_field" T="User">User Name</MudTableSortLabel></MudTh>
         <MudTh><MudTableSortLabel SortLabel="joined_field" T="User">Joined</MudTableSortLabel></MudTh>
         <MudTh><MudTableSortLabel SortLabel="email_field" T="User">Email</MudTableSortLabel></MudTh>
         <MudTh>Action</MudTh>
     </HeaderContent>
     <RowTemplate>
         <MudTd DataLabel="Id">@context.Id</MudTd>
         <MudTd DataLabel="UserName">@context.UserName</MudTd>
         <MudTd DataLabel="Joined">@context.Joined</MudTd>
         <MudTd DataLabel="Email">@context.Email</MudTd>
         <MudTd>
         @* <MudSelect Class="mt-0" T="" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@context.Role" SelectedValuesChanged="@(()=>RoleChanged(@context))"> *@
         @*     <MudSelectItem Value="@(BoardRole.User)" /> *@
         @*     <MudSelectItem Value="@(BoardRole.Moderator)" /> *@
         @*     <MudSelectItem Value="@(BoardRole.Admin)" /> *@
         @* </MudSelect> *@
         </MudTd>
     </RowTemplate>
     <NoRecordsContent>
         <MudText>No matching records found</MudText>
     </NoRecordsContent>
     <LoadingContent>
         <MudText>Loading...</MudText>
     </LoadingContent>
     <PagerContent>
         <MudTablePager />
     </PagerContent>
 </MudTable>

@code {
    private IEnumerable<User> _pagedData;
    private MudTable<User> _table;

    private int _totalItems;
    private string _searchString = null;
    
    private async Task<TableData<User>> ServerReload(TableState state)
    {
        IEnumerable<User> data = await _helperService.GetUsers();
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;
            if (element.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Id} {element.UserName} {element.Email}".Contains(_searchString))
                return true;
            return false;
        }).ToArray();
        _totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "username_field":
                data = data.OrderByDirection(state.SortDirection, o => o.UserName);
                break;
            case "joined_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Joined);
                break;
            case "email_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Email);
                break;
        }

        _pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<User>() {TotalItems = _totalItems, Items = _pagedData};
    }
    private void OnSearch(string text)
    {
        _searchString = text;
        _table.ReloadServerData();
    }
}